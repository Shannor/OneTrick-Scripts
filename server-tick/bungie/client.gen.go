// Package bungie provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package bungie

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CurrentActivityModeType.
const (
	CurrentActivityModeTypeAllDoubles              CurrentActivityModeType = 49
	CurrentActivityModeTypeAllMayhem               CurrentActivityModeType = 25
	CurrentActivityModeTypeAllPvE                  CurrentActivityModeType = 7
	CurrentActivityModeTypeAllPvECompetitive       CurrentActivityModeType = 64
	CurrentActivityModeTypeAllPvP                  CurrentActivityModeType = 5
	CurrentActivityModeTypeAllStrikes              CurrentActivityModeType = 18
	CurrentActivityModeTypeBlackArmoryRun          CurrentActivityModeType = 66
	CurrentActivityModeTypeBreakthrough            CurrentActivityModeType = 65
	CurrentActivityModeTypeClash                   CurrentActivityModeType = 12
	CurrentActivityModeTypeClashCompetitive        CurrentActivityModeType = 72
	CurrentActivityModeTypeClashQuickplay          CurrentActivityModeType = 71
	CurrentActivityModeTypeControl                 CurrentActivityModeType = 10
	CurrentActivityModeTypeControlCompetitive      CurrentActivityModeType = 74
	CurrentActivityModeTypeControlQuickplay        CurrentActivityModeType = 73
	CurrentActivityModeTypeCountdown               CurrentActivityModeType = 38
	CurrentActivityModeTypeCrimsonDoubles          CurrentActivityModeType = 15
	CurrentActivityModeTypeDares                   CurrentActivityModeType = 85
	CurrentActivityModeTypeDoubles                 CurrentActivityModeType = 50
	CurrentActivityModeTypeDungeon                 CurrentActivityModeType = 82
	CurrentActivityModeTypeElimination             CurrentActivityModeType = 80
	CurrentActivityModeTypeGambit                  CurrentActivityModeType = 63
	CurrentActivityModeTypeGambitPrime             CurrentActivityModeType = 75
	CurrentActivityModeTypeHeroicAdventure         CurrentActivityModeType = 58
	CurrentActivityModeTypeHeroicNightfall         CurrentActivityModeType = 17
	CurrentActivityModeTypeIronBanner              CurrentActivityModeType = 19
	CurrentActivityModeTypeIronBannerClash         CurrentActivityModeType = 44
	CurrentActivityModeTypeIronBannerControl       CurrentActivityModeType = 43
	CurrentActivityModeTypeIronBannerRift          CurrentActivityModeType = 90
	CurrentActivityModeTypeIronBannerSalvage       CurrentActivityModeType = 68
	CurrentActivityModeTypeIronBannerSupremacy     CurrentActivityModeType = 45
	CurrentActivityModeTypeIronBannerZoneControl   CurrentActivityModeType = 91
	CurrentActivityModeTypeLockdown                CurrentActivityModeType = 60
	CurrentActivityModeTypeLostSector              CurrentActivityModeType = 87
	CurrentActivityModeTypeMenagerie               CurrentActivityModeType = 77
	CurrentActivityModeTypeMomentum                CurrentActivityModeType = 81
	CurrentActivityModeTypeNightfall               CurrentActivityModeType = 16
	CurrentActivityModeTypeNightmareHunt           CurrentActivityModeType = 79
	CurrentActivityModeTypeNone                    CurrentActivityModeType = 0
	CurrentActivityModeTypeOffensive               CurrentActivityModeType = 86
	CurrentActivityModeTypePatrol                  CurrentActivityModeType = 6
	CurrentActivityModeTypePrivateMatchesAll       CurrentActivityModeType = 32
	CurrentActivityModeTypePrivateMatchesClash     CurrentActivityModeType = 51
	CurrentActivityModeTypePrivateMatchesControl   CurrentActivityModeType = 52
	CurrentActivityModeTypePrivateMatchesCountdown CurrentActivityModeType = 54
	CurrentActivityModeTypePrivateMatchesMayhem    CurrentActivityModeType = 56
	CurrentActivityModeTypePrivateMatchesRumble    CurrentActivityModeType = 57
	CurrentActivityModeTypePrivateMatchesSupremacy CurrentActivityModeType = 53
	CurrentActivityModeTypePrivateMatchesSurvival  CurrentActivityModeType = 55
	CurrentActivityModeTypePvPCompetitive          CurrentActivityModeType = 69
	CurrentActivityModeTypePvPQuickplay            CurrentActivityModeType = 70
	CurrentActivityModeTypeRaid                    CurrentActivityModeType = 4
	CurrentActivityModeTypeReckoning               CurrentActivityModeType = 76
	CurrentActivityModeTypeRelic                   CurrentActivityModeType = 92
	CurrentActivityModeTypeReserved11              CurrentActivityModeType = 11
	CurrentActivityModeTypeReserved13              CurrentActivityModeType = 13
	CurrentActivityModeTypeReserved20              CurrentActivityModeType = 20
	CurrentActivityModeTypeReserved21              CurrentActivityModeType = 21
	CurrentActivityModeTypeReserved22              CurrentActivityModeType = 22
	CurrentActivityModeTypeReserved24              CurrentActivityModeType = 24
	CurrentActivityModeTypeReserved26              CurrentActivityModeType = 26
	CurrentActivityModeTypeReserved27              CurrentActivityModeType = 27
	CurrentActivityModeTypeReserved28              CurrentActivityModeType = 28
	CurrentActivityModeTypeReserved29              CurrentActivityModeType = 29
	CurrentActivityModeTypeReserved30              CurrentActivityModeType = 30
	CurrentActivityModeTypeReserved9               CurrentActivityModeType = 9
	CurrentActivityModeTypeRift                    CurrentActivityModeType = 88
	CurrentActivityModeTypeRumble                  CurrentActivityModeType = 48
	CurrentActivityModeTypeSalvage                 CurrentActivityModeType = 67
	CurrentActivityModeTypeScorched                CurrentActivityModeType = 61
	CurrentActivityModeTypeScorchedTeam            CurrentActivityModeType = 62
	CurrentActivityModeTypeScoredHeroicNightfall   CurrentActivityModeType = 47
	CurrentActivityModeTypeScoredNightfall         CurrentActivityModeType = 46
	CurrentActivityModeTypeShowdown                CurrentActivityModeType = 59
	CurrentActivityModeTypeSocial                  CurrentActivityModeType = 40
	CurrentActivityModeTypeStory                   CurrentActivityModeType = 2
	CurrentActivityModeTypeStrike                  CurrentActivityModeType = 3
	CurrentActivityModeTypeSundial                 CurrentActivityModeType = 83
	CurrentActivityModeTypeSupremacy               CurrentActivityModeType = 31
	CurrentActivityModeTypeSurvival                CurrentActivityModeType = 37
	CurrentActivityModeTypeTrialsCountdown         CurrentActivityModeType = 41
	CurrentActivityModeTypeTrialsOfOsiris          CurrentActivityModeType = 84
	CurrentActivityModeTypeTrialsOfTheNine         CurrentActivityModeType = 39
	CurrentActivityModeTypeTrialsSurvival          CurrentActivityModeType = 42
	CurrentActivityModeTypeVexOffensive            CurrentActivityModeType = 78
	CurrentActivityModeTypeZoneControl             CurrentActivityModeType = 89
)

// Defines values for DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType.
const (
	DestinyEntitiesItemsDestinyItemInstanceComponentBreakerTypeN0 DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType = 0
	DestinyEntitiesItemsDestinyItemInstanceComponentBreakerTypeN1 DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType = 1
	DestinyEntitiesItemsDestinyItemInstanceComponentBreakerTypeN2 DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType = 2
	DestinyEntitiesItemsDestinyItemInstanceComponentBreakerTypeN3 DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType = 3
)

// Defines values for DestinyMilestonesDestinyMilestoneActivityActivityModeType.
const (
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN0  DestinyMilestonesDestinyMilestoneActivityActivityModeType = 0
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN10 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 10
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN11 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 11
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN12 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 12
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN13 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 13
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN15 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 15
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN16 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 16
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN17 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 17
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN18 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 18
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN19 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 19
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN2  DestinyMilestonesDestinyMilestoneActivityActivityModeType = 2
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN20 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 20
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN21 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 21
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN22 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 22
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN24 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 24
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN25 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 25
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN26 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 26
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN27 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 27
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN28 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 28
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN29 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 29
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN3  DestinyMilestonesDestinyMilestoneActivityActivityModeType = 3
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN30 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 30
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN31 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 31
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN32 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 32
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN37 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 37
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN38 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 38
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN39 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 39
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN4  DestinyMilestonesDestinyMilestoneActivityActivityModeType = 4
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN40 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 40
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN41 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 41
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN42 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 42
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN43 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 43
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN44 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 44
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN45 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 45
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN46 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 46
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN47 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 47
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN48 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 48
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN49 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 49
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN5  DestinyMilestonesDestinyMilestoneActivityActivityModeType = 5
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN50 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 50
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN51 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 51
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN52 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 52
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN53 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 53
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN54 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 54
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN55 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 55
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN56 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 56
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN57 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 57
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN58 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 58
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN59 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 59
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN6  DestinyMilestonesDestinyMilestoneActivityActivityModeType = 6
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN60 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 60
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN61 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 61
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN62 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 62
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN63 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 63
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN64 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 64
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN65 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 65
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN66 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 66
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN67 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 67
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN68 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 68
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN69 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 69
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN7  DestinyMilestonesDestinyMilestoneActivityActivityModeType = 7
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN70 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 70
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN71 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 71
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN72 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 72
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN73 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 73
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN74 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 74
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN75 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 75
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN76 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 76
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN77 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 77
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN78 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 78
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN79 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 79
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN80 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 80
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN81 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 81
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN82 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 82
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN83 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 83
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN84 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 84
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN85 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 85
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN86 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 86
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN87 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 87
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN88 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 88
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN89 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 89
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN9  DestinyMilestonesDestinyMilestoneActivityActivityModeType = 9
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN90 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 90
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN91 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 91
	DestinyMilestonesDestinyMilestoneActivityActivityModeTypeN92 DestinyMilestonesDestinyMilestoneActivityActivityModeType = 92
)

// Defines values for DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType.
const (
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN0  DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 0
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN10 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 10
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN11 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 11
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN12 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 12
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN13 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 13
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN15 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 15
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN16 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 16
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN17 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 17
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN18 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 18
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN19 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 19
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN2  DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 2
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN20 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 20
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN21 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 21
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN22 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 22
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN24 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 24
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN25 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 25
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN26 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 26
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN27 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 27
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN28 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 28
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN29 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 29
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN3  DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 3
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN30 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 30
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN31 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 31
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN32 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 32
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN37 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 37
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN38 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 38
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN39 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 39
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN4  DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 4
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN40 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 40
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN41 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 41
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN42 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 42
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN43 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 43
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN44 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 44
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN45 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 45
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN46 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 46
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN47 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 47
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN48 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 48
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN49 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 49
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN5  DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 5
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN50 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 50
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN51 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 51
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN52 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 52
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN53 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 53
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN54 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 54
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN55 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 55
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN56 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 56
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN57 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 57
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN58 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 58
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN59 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 59
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN6  DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 6
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN60 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 60
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN61 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 61
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN62 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 62
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN63 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 63
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN64 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 64
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN65 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 65
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN66 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 66
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN67 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 67
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN68 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 68
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN69 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 69
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN7  DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 7
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN70 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 70
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN71 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 71
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN72 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 72
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN73 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 73
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN74 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 74
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN75 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 75
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN76 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 76
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN77 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 77
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN78 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 78
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN79 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 79
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN80 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 80
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN81 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 81
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN82 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 82
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN83 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 83
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN84 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 84
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN85 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 85
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN86 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 86
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN87 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 87
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN88 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 88
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN89 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 89
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN9  DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 9
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN90 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 90
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN91 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 91
	DestinyMilestonesDestinyMilestoneActivityVariantActivityModeTypeN92 DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType = 92
)

// CommonModelsCoreSetting defines model for Common.Models.CoreSetting.
type CommonModelsCoreSetting struct {
	ChildSettings *[]CommonModelsCoreSetting `json:"childSettings,omitempty"`
	DisplayName   *string                    `json:"displayName,omitempty"`
	Identifier    *string                    `json:"identifier,omitempty"`
	ImagePath     *string                    `json:"imagePath,omitempty"`
	IsDefault     *bool                      `json:"isDefault,omitempty"`
	Summary       *string                    `json:"summary,omitempty"`
}

// ContentModelsContentTypeDefaultValue defines model for Content.Models.ContentTypeDefaultValue.
type ContentModelsContentTypeDefaultValue struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	WhenClause   *string `json:"whenClause,omitempty"`
	WhenValue    *string `json:"whenValue,omitempty"`
}

// ContentModelsContentTypeProperty defines model for Content.Models.ContentTypeProperty.
type ContentModelsContentTypeProperty struct {
	Attributes                     *map[string]string                      `json:"attributes,omitempty"`
	BindToProperty                 *string                                 `json:"bindToProperty,omitempty"`
	BoundRegex                     *string                                 `json:"boundRegex,omitempty"`
	ChildProperties                *[]ContentModelsContentTypeProperty     `json:"childProperties,omitempty"`
	ContentTypeAllowed             *string                                 `json:"contentTypeAllowed,omitempty"`
	Datatype                       *int32                                  `json:"datatype,omitempty"`
	DefaultValues                  *[]ContentModelsContentTypeDefaultValue `json:"defaultValues,omitempty"`
	Enabled                        *bool                                   `json:"enabled,omitempty"`
	Entitytype                     *string                                 `json:"entitytype,omitempty"`
	Fallback                       *bool                                   `json:"fallback,omitempty"`
	IsCombo                        *bool                                   `json:"isCombo,omitempty"`
	IsExternalAllowed              *bool                                   `json:"isExternalAllowed,omitempty"`
	IsImage                        *bool                                   `json:"isImage,omitempty"`
	IsTitle                        *bool                                   `json:"isTitle,omitempty"`
	IsVideo                        *bool                                   `json:"isVideo,omitempty"`
	LegalContentTypes              *[]string                               `json:"legalContentTypes,omitempty"`
	Localizable                    *bool                                   `json:"localizable,omitempty"`
	MaxByteLength                  *int32                                  `json:"maxByteLength,omitempty"`
	MaxFileSize                    *int32                                  `json:"maxFileSize,omitempty"`
	MaxHeight                      *int32                                  `json:"maxHeight,omitempty"`
	MaxLength                      *int32                                  `json:"maxLength,omitempty"`
	MaxWidth                       *int32                                  `json:"maxWidth,omitempty"`
	MinHeight                      *int32                                  `json:"minHeight,omitempty"`
	MinWidth                       *int32                                  `json:"minWidth,omitempty"`
	Name                           *string                                 `json:"name,omitempty"`
	Order                          *int32                                  `json:"order,omitempty"`
	PropertyDescription            *string                                 `json:"propertyDescription,omitempty"`
	PropertySection                *string                                 `json:"propertySection,omitempty"`
	ReadableName                   *string                                 `json:"readableName,omitempty"`
	Regexp                         *string                                 `json:"regexp,omitempty"`
	RepresentationSelection        *map[string]string                      `json:"representationSelection,omitempty"`
	RepresentationValidationString *string                                 `json:"representationValidationString,omitempty"`
	Required                       *bool                                   `json:"required,omitempty"`
	RootPropertyName               *string                                 `json:"rootPropertyName,omitempty"`
	RssAttribute                   *string                                 `json:"rssAttribute,omitempty"`
	SuppressProperty               *bool                                   `json:"suppressProperty,omitempty"`
	ValidateAs                     *string                                 `json:"validateAs,omitempty"`
	Value                          *string                                 `json:"value,omitempty"`
	Visible                        *bool                                   `json:"visible,omitempty"`
	VisibleDependency              *string                                 `json:"visibleDependency,omitempty"`
	VisibleOn                      *string                                 `json:"visibleOn,omitempty"`
	Weight                         *int32                                  `json:"weight,omitempty"`
}

// DestinyArtifactsDestinyArtifactCharacterScoped defines model for Destiny.Artifacts.DestinyArtifactCharacterScoped.
type DestinyArtifactsDestinyArtifactCharacterScoped struct {
	ArtifactHash *uint32                                `json:"artifactHash,omitempty"`
	PointsUsed   *int32                                 `json:"pointsUsed,omitempty"`
	ResetCount   *int32                                 `json:"resetCount,omitempty"`
	Tiers        *[]DestinyArtifactsDestinyArtifactTier `json:"tiers,omitempty"`
}

// DestinyArtifactsDestinyArtifactProfileScoped Represents a Seasonal Artifact and all data related to it for the requested Account.
// It can be combined with Character-scoped data for a full picture of what a character has available/has chosen, or just these settings can be used for overview information.
type DestinyArtifactsDestinyArtifactProfileScoped struct {
	ArtifactHash *uint32 `json:"artifactHash,omitempty"`

	// PointProgression Information about a current character's status with a Progression. A progression is a value that can increase with activity and has levels. Think Character Level and Reputation Levels. Combine this "live" data with the related DestinyProgressionDefinition for a full picture of the Progression.
	PointProgression *DestinyDestinyProgression `json:"pointProgression,omitempty"`
	PointsAcquired   *int32                     `json:"pointsAcquired,omitempty"`
	PowerBonus       *int32                     `json:"powerBonus,omitempty"`

	// PowerBonusProgression Information about a current character's status with a Progression. A progression is a value that can increase with activity and has levels. Think Character Level and Reputation Levels. Combine this "live" data with the related DestinyProgressionDefinition for a full picture of the Progression.
	PowerBonusProgression *DestinyDestinyProgression `json:"powerBonusProgression,omitempty"`
}

// DestinyArtifactsDestinyArtifactTier defines model for Destiny.Artifacts.DestinyArtifactTier.
type DestinyArtifactsDestinyArtifactTier struct {
	IsUnlocked     *bool                                      `json:"isUnlocked,omitempty"`
	Items          *[]DestinyArtifactsDestinyArtifactTierItem `json:"items,omitempty"`
	PointsToUnlock *int32                                     `json:"pointsToUnlock,omitempty"`
	TierHash       *uint32                                    `json:"tierHash,omitempty"`
}

// DestinyArtifactsDestinyArtifactTierItem defines model for Destiny.Artifacts.DestinyArtifactTierItem.
type DestinyArtifactsDestinyArtifactTierItem struct {
	IsActive  *bool   `json:"isActive,omitempty"`
	IsVisible *bool   `json:"isVisible,omitempty"`
	ItemHash  *uint32 `json:"itemHash,omitempty"`
}

// DestinyChallengesDestinyChallengeStatus Represents the status and other related information for a challenge that is - or was - available to a player.
// A challenge is a bonus objective, generally tacked onto Quests or Activities, that provide additional variations on play.
type DestinyChallengesDestinyChallengeStatus struct {
	// Objective The progress - including completion status - of the active challenge.
	Objective *DestinyQuestsDestinyObjectiveProgress `json:"objective,omitempty"`
}

// DestinyCharacterDestinyCharacterCustomization Raw data about the customization options chosen for a character's face and appearance.
// You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet)
type DestinyCharacterDestinyCharacterCustomization struct {
	DecalColor    *uint32   `json:"decalColor,omitempty"`
	DecalIndex    *int32    `json:"decalIndex,omitempty"`
	EyeColor      *uint32   `json:"eyeColor,omitempty"`
	Face          *uint32   `json:"face,omitempty"`
	FeatureColors *[]uint32 `json:"featureColors,omitempty"`
	FeatureIndex  *int32    `json:"featureIndex,omitempty"`
	HairColors    *[]uint32 `json:"hairColors,omitempty"`
	HairIndex     *int32    `json:"hairIndex,omitempty"`
	LipColor      *uint32   `json:"lipColor,omitempty"`
	Personality   *uint32   `json:"personality,omitempty"`
	SkinColor     *uint32   `json:"skinColor,omitempty"`
	WearHelmet    *bool     `json:"wearHelmet,omitempty"`
}

// DestinyCharacterDestinyCharacterPeerView A minimal view of a character's equipped items, for the purpose of rendering a summary screen or showing the character in 3D.
type DestinyCharacterDestinyCharacterPeerView struct {
	Equipment *[]DestinyCharacterDestinyItemPeerView `json:"equipment,omitempty"`
}

// DestinyCharacterDestinyItemPeerView Bare minimum summary information for an item, for the sake of 3D rendering the item.
type DestinyCharacterDestinyItemPeerView struct {
	// Dyes The list of dyes that have been applied to this item.
	Dyes *[]DestinyDyeReference `json:"dyes,omitempty"`

	// ItemHash The hash identifier of the item in question. Use it to look up the DestinyInventoryItemDefinition of the item for static rendering data.
	ItemHash *uint32 `json:"itemHash,omitempty"`
}

// DestinyComponentsCollectiblesDestinyCollectibleComponent defines model for Destiny.Components.Collectibles.DestinyCollectibleComponent.
type DestinyComponentsCollectiblesDestinyCollectibleComponent struct {
	State *int32 `json:"state,omitempty"`
}

// DestinyComponentsCollectiblesDestinyCollectiblesComponent defines model for Destiny.Components.Collectibles.DestinyCollectiblesComponent.
type DestinyComponentsCollectiblesDestinyCollectiblesComponent struct {
	Collectibles *map[string]DestinyComponentsCollectiblesDestinyCollectibleComponent `json:"collectibles,omitempty"`

	// CollectionBadgesRootNodeHash The hash for the root presentation node definition of Collection Badges.
	CollectionBadgesRootNodeHash *uint32 `json:"collectionBadgesRootNodeHash,omitempty"`

	// CollectionCategoriesRootNodeHash The hash for the root presentation node definition of Collection categories.
	CollectionCategoriesRootNodeHash *uint32 `json:"collectionCategoriesRootNodeHash,omitempty"`
}

// DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent defines model for Destiny.Components.Collectibles.DestinyProfileCollectiblesComponent.
type DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent struct {
	Collectibles *map[string]DestinyComponentsCollectiblesDestinyCollectibleComponent `json:"collectibles,omitempty"`

	// CollectionBadgesRootNodeHash The hash for the root presentation node definition of Collection Badges.
	CollectionBadgesRootNodeHash *uint32 `json:"collectionBadgesRootNodeHash,omitempty"`

	// CollectionCategoriesRootNodeHash The hash for the root presentation node definition of Collection categories.
	CollectionCategoriesRootNodeHash *uint32 `json:"collectionCategoriesRootNodeHash,omitempty"`

	// NewnessFlaggedCollectibleHashes The list of collectibles determined by the game as having been "recently" acquired.
	// The game client itself actually controls this data, so I personally question whether anyone will get much use out of this: because we can't edit this value through the API. But in case anyone finds it useful, here it is.
	NewnessFlaggedCollectibleHashes *[]uint32 `json:"newnessFlaggedCollectibleHashes,omitempty"`

	// RecentCollectibleHashes The list of collectibles determined by the game as having been "recently" acquired.
	RecentCollectibleHashes *[]uint32 `json:"recentCollectibleHashes,omitempty"`
}

// DestinyComponentsCraftablesDestinyCraftableComponent defines model for Destiny.Components.Craftables.DestinyCraftableComponent.
type DestinyComponentsCraftablesDestinyCraftableComponent struct {
	// FailedRequirementIndexes If the requirements are not met for crafting this item, these will index into the list of failure strings.
	FailedRequirementIndexes *[]int32 `json:"failedRequirementIndexes,omitempty"`

	// Sockets Plug item state for the crafting sockets.
	Sockets *[]DestinyComponentsCraftablesDestinyCraftableSocketComponent `json:"sockets,omitempty"`
	Visible *bool                                                         `json:"visible,omitempty"`
}

// DestinyComponentsCraftablesDestinyCraftableSocketComponent defines model for Destiny.Components.Craftables.DestinyCraftableSocketComponent.
type DestinyComponentsCraftablesDestinyCraftableSocketComponent struct {
	PlugSetHash *uint32 `json:"plugSetHash,omitempty"`

	// Plugs Unlock state for plugs in the socket plug set definition
	Plugs *[]DestinyComponentsCraftablesDestinyCraftableSocketPlugComponent `json:"plugs,omitempty"`
}

// DestinyComponentsCraftablesDestinyCraftableSocketPlugComponent defines model for Destiny.Components.Craftables.DestinyCraftableSocketPlugComponent.
type DestinyComponentsCraftablesDestinyCraftableSocketPlugComponent struct {
	// FailedRequirementIndexes Index into the unlock requirements to display failure descriptions
	FailedRequirementIndexes *[]int32 `json:"failedRequirementIndexes,omitempty"`
	PlugItemHash             *uint32  `json:"plugItemHash,omitempty"`
}

// DestinyComponentsCraftablesDestinyCraftablesComponent defines model for Destiny.Components.Craftables.DestinyCraftablesComponent.
type DestinyComponentsCraftablesDestinyCraftablesComponent struct {
	// Craftables A map of craftable item hashes to craftable item state components.
	Craftables *map[string]DestinyComponentsCraftablesDestinyCraftableComponent `json:"craftables,omitempty"`

	// CraftingRootNodeHash The hash for the root presentation node definition of craftable item categories.
	CraftingRootNodeHash *uint32 `json:"craftingRootNodeHash,omitempty"`
}

// DestinyComponentsInventoryDestinyCurrenciesComponent This component provides a quick lookup of every item the requested character has and how much of that item they have.
// Requesting this component will allow you to circumvent manually putting together the list of which currencies you have for the purpose of testing currency requirements on an item being purchased, or operations that have costs.
// You *could* figure this out yourself by doing a GetCharacter or GetProfile request and forming your own lookup table, but that is inconvenient enough that this feels like a worthwhile (and optional) redundancy. Don't bother requesting it if you have already created your own lookup from prior GetCharacter/GetProfile calls.
type DestinyComponentsInventoryDestinyCurrenciesComponent struct {
	// ItemQuantities A dictionary - keyed by the item's hash identifier (DestinyInventoryItemDefinition), and whose value is the amount of that item you have across all available inventory buckets for purchasing.
	// This allows you to see whether the requesting character can afford any given purchase/action without having to re-create this list itself.
	ItemQuantities *map[string]int32 `json:"itemQuantities,omitempty"`

	// MaterialRequirementSetStates A map of material requirement hashes and their status information.
	MaterialRequirementSetStates *map[string]DestinyComponentsInventoryDestinyMaterialRequirementSetState `json:"materialRequirementSetStates,omitempty"`
}

// DestinyComponentsInventoryDestinyMaterialRequirementSetState defines model for Destiny.Components.Inventory.DestinyMaterialRequirementSetState.
type DestinyComponentsInventoryDestinyMaterialRequirementSetState struct {
	// MaterialRequirementSetHash The hash identifier of the material requirement set. Use it to look up the DestinyMaterialRequirementSetDefinition.
	MaterialRequirementSetHash *uint32 `json:"materialRequirementSetHash,omitempty"`

	// MaterialRequirementStates The dynamic state values for individual material requirements.
	MaterialRequirementStates *[]DestinyComponentsInventoryDestinyMaterialRequirementState `json:"materialRequirementStates,omitempty"`
}

// DestinyComponentsInventoryDestinyMaterialRequirementState defines model for Destiny.Components.Inventory.DestinyMaterialRequirementState.
type DestinyComponentsInventoryDestinyMaterialRequirementState struct {
	// Count The amount of the material required.
	Count *int32 `json:"count,omitempty"`

	// ItemHash The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.
	ItemHash *uint32 `json:"itemHash,omitempty"`

	// StackSize A value for the amount of a (possibly virtual) material on some scope. For example: Dawning cookie baking material requirements.
	StackSize *int32 `json:"stackSize,omitempty"`
}

// DestinyComponentsInventoryDestinyPlatformSilverComponent defines model for Destiny.Components.Inventory.DestinyPlatformSilverComponent.
type DestinyComponentsInventoryDestinyPlatformSilverComponent struct {
	// PlatformSilver If a Profile is played on multiple platforms, this is the silver they have for each platform, keyed by Membership Type.
	PlatformSilver *map[string]ItemComponent `json:"platformSilver,omitempty"`
}

// DestinyComponentsItemsDestinyItemPlugComponent Plugs are non-instanced items that can provide Stat and Perk benefits when socketed into an instanced item. Items have Sockets, and Plugs are inserted into Sockets.
// This component finds all items that are considered "Plugs" in your inventory, and return information about the plug aside from any specific Socket into which it could be inserted.
type DestinyComponentsItemsDestinyItemPlugComponent struct {
	// CanInsert If true, this plug has met all of its insertion requirements. Big if true.
	CanInsert *bool `json:"canInsert,omitempty"`

	// EnableFailIndexes If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
	// This list will be empty if the plug is enabled.
	EnableFailIndexes *[]int32 `json:"enableFailIndexes,omitempty"`

	// Enabled If true, this plug will provide its benefits while inserted.
	Enabled *bool `json:"enabled,omitempty"`

	// InsertFailIndexes If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
	// This list will be empty if the plug can be inserted.
	InsertFailIndexes *[]int32 `json:"insertFailIndexes,omitempty"`

	// MaxStackSize If available, this is the maximum stack size to display for the socket plug item.
	MaxStackSize *int32 `json:"maxStackSize"`

	// PlugItemHash The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
	PlugItemHash *uint32 `json:"plugItemHash,omitempty"`

	// PlugObjectives Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the "gating" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.
	PlugObjectives *[]DestinyQuestsDestinyObjectiveProgress `json:"plugObjectives,omitempty"`

	// StackSize If available, this is the stack size to display for the socket plug item.
	StackSize *int32 `json:"stackSize"`
}

// DestinyComponentsItemsDestinyItemPlugObjectivesComponent defines model for Destiny.Components.Items.DestinyItemPlugObjectivesComponent.
type DestinyComponentsItemsDestinyItemPlugObjectivesComponent struct {
	// ObjectivesPerPlug This set of data is keyed by the Item Hash (DestinyInventoryItemDefinition) of the plug whose objectives are being returned, with the value being the list of those objectives.
	//  What if two plugs with the same hash are returned for an item, you ask?
	//  Good question! They share the same item-scoped state, and as such would have identical objective state as a result. How's that for convenient.
	//  Sometimes, Plugs may have objectives: generally, these are used for flavor and display purposes. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.
	ObjectivesPerPlug *map[string][]DestinyQuestsDestinyObjectiveProgress `json:"objectivesPerPlug,omitempty"`
}

// DestinyComponentsItemsDestinyItemReusablePlugsComponent defines model for Destiny.Components.Items.DestinyItemReusablePlugsComponent.
type DestinyComponentsItemsDestinyItemReusablePlugsComponent struct {
	// Plugs If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are "enabled", whether they are allowed to be inserted, and any other information such as objectives.
	//  A Reusable Plug is a plug that you can always insert into this socket as long as its insertion rules are passed, regardless of whether or not you have the plug in your inventory. An example of it failing an insertion rule would be if it has an Objective that needs to be completed before it can be inserted, and that objective hasn't been completed yet.
	//  In practice, a socket will *either* have reusable plugs *or* it will allow for plugs in your inventory to be inserted. See DestinyInventoryItemDefinition.socket for more info.
	//  KEY = The INDEX into the item's list of sockets. VALUE = The set of plugs for that socket.
	//  If a socket doesn't have any reusable plugs defined at the item scope, there will be no entry for that socket.
	Plugs *map[string][]DestinySocketsDestinyItemPlugBase `json:"plugs,omitempty"`
}

// DestinyComponentsKiosksDestinyKioskItem defines model for Destiny.Components.Kiosks.DestinyKioskItem.
type DestinyComponentsKiosksDestinyKioskItem struct {
	// CanAcquire If true, the user can not only see the item, but they can acquire it. It is possible that a user can see a kiosk item and not be able to acquire it.
	CanAcquire *bool `json:"canAcquire,omitempty"`

	// FailureIndexes Indexes into failureStrings for the Vendor, indicating the reasons why it failed if any.
	FailureIndexes *[]int32 `json:"failureIndexes,omitempty"`

	// FlavorObjective I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for "flavor" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.
	FlavorObjective *DestinyQuestsDestinyObjectiveProgress `json:"flavorObjective,omitempty"`

	// Index The index of the item in the related DestinyVendorDefintion's itemList property, representing the sale.
	Index *int32 `json:"index,omitempty"`
}

// DestinyComponentsKiosksDestinyKiosksComponent A Kiosk is a Vendor (DestinyVendorDefinition) that sells items based on whether you have already acquired that item before.
// This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the individual character's DestinyCharacterKiosksComponent.
// Note that, because this component returns vendorItemIndexes (that is to say, indexes into the Kiosk Vendor's itemList property), these results are necessarily content version dependent. Make sure that you have the latest version of the content manifest databases before using this data.
type DestinyComponentsKiosksDestinyKiosksComponent struct {
	// KioskItems A dictionary keyed by the Kiosk Vendor's hash identifier (use it to look up the DestinyVendorDefinition for the relevant kiosk vendor), and whose value is a list of all the items that the user can "see" in the Kiosk, and any other interesting metadata.
	KioskItems *map[string][]DestinyComponentsKiosksDestinyKioskItem `json:"kioskItems,omitempty"`
}

// DestinyComponentsLoadoutsDestinyLoadoutComponent defines model for Destiny.Components.Loadouts.DestinyLoadoutComponent.
type DestinyComponentsLoadoutsDestinyLoadoutComponent struct {
	ColorHash *uint32                                                 `json:"colorHash,omitempty"`
	IconHash  *uint32                                                 `json:"iconHash,omitempty"`
	Items     *[]DestinyComponentsLoadoutsDestinyLoadoutItemComponent `json:"items,omitempty"`
	NameHash  *uint32                                                 `json:"nameHash,omitempty"`
}

// DestinyComponentsLoadoutsDestinyLoadoutItemComponent defines model for Destiny.Components.Loadouts.DestinyLoadoutItemComponent.
type DestinyComponentsLoadoutsDestinyLoadoutItemComponent struct {
	ItemInstanceId *int64    `json:"itemInstanceId,omitempty"`
	PlugItemHashes *[]uint32 `json:"plugItemHashes,omitempty"`
}

// DestinyComponentsLoadoutsDestinyLoadoutsComponent defines model for Destiny.Components.Loadouts.DestinyLoadoutsComponent.
type DestinyComponentsLoadoutsDestinyLoadoutsComponent struct {
	Loadouts *[]DestinyComponentsLoadoutsDestinyLoadoutComponent `json:"loadouts,omitempty"`
}

// DestinyComponentsMetricsDestinyMetricComponent defines model for Destiny.Components.Metrics.DestinyMetricComponent.
type DestinyComponentsMetricsDestinyMetricComponent struct {
	Invisible *bool `json:"invisible,omitempty"`

	// ObjectiveProgress Returns data about a character's status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes.
	ObjectiveProgress *DestinyQuestsDestinyObjectiveProgress `json:"objectiveProgress,omitempty"`
}

// DestinyComponentsMetricsDestinyMetricsComponent defines model for Destiny.Components.Metrics.DestinyMetricsComponent.
type DestinyComponentsMetricsDestinyMetricsComponent struct {
	Metrics             *map[string]DestinyComponentsMetricsDestinyMetricComponent `json:"metrics,omitempty"`
	MetricsRootNodeHash *uint32                                                    `json:"metricsRootNodeHash,omitempty"`
}

// DestinyComponentsPlugSetsDestinyPlugSetsComponent Sockets may refer to a "Plug Set": a set of reusable plugs that may be shared across multiple sockets (or even, in theory, multiple sockets over multiple items).
// This is the set of those plugs that we came across in the users' inventory, along with the values for plugs in the set. Any given set in this component may be represented in Character and Profile-level, as some plugs may be Profile-level restricted, and some character-level restricted. (note that the ones that are even more specific will remain on the actual socket component itself, as they cannot be reused)
type DestinyComponentsPlugSetsDestinyPlugSetsComponent struct {
	// Plugs The shared list of plugs for each relevant PlugSet, keyed by the hash identifier of the PlugSet (DestinyPlugSetDefinition).
	Plugs *map[string][]DestinySocketsDestinyItemPlug `json:"plugs,omitempty"`
}

// DestinyComponentsPresentationDestinyPresentationNodeComponent defines model for Destiny.Components.Presentation.DestinyPresentationNodeComponent.
type DestinyComponentsPresentationDestinyPresentationNodeComponent struct {
	// CompletionValue The value at which the presentation node is considered to be completed.
	CompletionValue *int32 `json:"completionValue,omitempty"`

	// Objective An optional property: presentation nodes MAY have objectives, which can be used to infer more human readable data about the progress. However, progressValue and completionValue ought to be considered the canonical values for progress on Progression Nodes.
	Objective *DestinyQuestsDestinyObjectiveProgress `json:"objective,omitempty"`

	// ProgressValue How much of the presentation node is considered to be completed so far by the given character/profile.
	ProgressValue *int32 `json:"progressValue,omitempty"`

	// RecordCategoryScore If available, this is the current score for the record category that this node represents.
	RecordCategoryScore *int32 `json:"recordCategoryScore"`
	State               *int32 `json:"state,omitempty"`
}

// DestinyComponentsPresentationDestinyPresentationNodesComponent defines model for Destiny.Components.Presentation.DestinyPresentationNodesComponent.
type DestinyComponentsPresentationDestinyPresentationNodesComponent struct {
	Nodes *map[string]DestinyComponentsPresentationDestinyPresentationNodeComponent `json:"nodes,omitempty"`
}

// DestinyComponentsProfilesDestinyProfileProgressionComponent The set of progression-related information that applies at a Profile-wide level for your Destiny experience. This differs from the Jimi Hendrix Experience because there's less guitars on fire. Yet. #spoileralert?
// This will include information such as Checklist info.
type DestinyComponentsProfilesDestinyProfileProgressionComponent struct {
	// Checklists The set of checklists that can be examined on a profile-wide basis, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)
	// For each checklist returned, its value is itself a Dictionary keyed by the checklist's hash identifier with the value being a boolean indicating if it's been discovered yet.
	Checklists *map[string]map[string]bool `json:"checklists,omitempty"`

	// SeasonalArtifact Data related to your progress on the current season's artifact that is the same across characters.
	SeasonalArtifact *DestinyArtifactsDestinyArtifactProfileScoped `json:"seasonalArtifact,omitempty"`
}

// DestinyComponentsProfilesDestinyProfileTransitoryComponent This is an experimental set of data that Bungie considers to be "transitory" - information that may be useful for API users, but that is coming from a non-authoritative data source about information that could potentially change at a more frequent pace than Bungie.net will receive updates about it.
// This information is provided exclusively for convenience should any of it be useful to users: we provide no guarantees to the accuracy or timeliness of data that comes from this source. Know that this data can potentially be out-of-date or even wrong entirely if the user disconnected from the game or suddenly changed their status before we can receive refreshed data.
type DestinyComponentsProfilesDestinyProfileTransitoryComponent struct {
	// CurrentActivity If you are in an activity, this is some transitory info about the activity currently being played.
	CurrentActivity *DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity `json:"currentActivity,omitempty"`

	// Joinability Information about whether and what might prevent you from joining this person on a fireteam.
	Joinability *DestinyComponentsProfilesDestinyProfileTransitoryJoinability `json:"joinability,omitempty"`

	// LastOrbitedDestinationHash The hash identifier for the DestinyDestinationDefinition of the last location you were orbiting when in orbit.
	LastOrbitedDestinationHash *uint32 `json:"lastOrbitedDestinationHash"`

	// PartyMembers If you have any members currently in your party, this is some (very) bare-bones information about those members.
	PartyMembers *[]PartyMember `json:"partyMembers,omitempty"`

	// Tracking Information about tracked entities.
	Tracking *[]DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry `json:"tracking,omitempty"`
}

// DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity If you are playing in an activity, this is some information about it.
// Note that we cannot guarantee any of this resembles what ends up in the PGCR in any way. They are sourced by two entirely separate systems with their own logic, and the one we source this data from should be considered non-authoritative in comparison.
type DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity struct {
	// EndTime If you're still in it but it "ended" (like when folks are dancing around the loot after they beat a boss), this is when the activity ended.
	EndTime *time.Time `json:"endTime"`

	// HighestOpposingFactionScore If you have human opponents, this is the highest opposing team's score.
	HighestOpposingFactionScore *float32 `json:"highestOpposingFactionScore,omitempty"`

	// NumberOfOpponents This is how many human or poorly crafted aimbot opponents you have.
	NumberOfOpponents *int32 `json:"numberOfOpponents,omitempty"`

	// NumberOfPlayers This is how many human or poorly crafted aimbots are on your team.
	NumberOfPlayers *int32 `json:"numberOfPlayers,omitempty"`

	// Score This is what our non-authoritative source thought the score was.
	Score *float32 `json:"score,omitempty"`

	// StartTime When the activity started.
	StartTime *time.Time `json:"startTime"`
}

// DestinyComponentsProfilesDestinyProfileTransitoryJoinability Some basic information about whether you can be joined, how many slots are left etc. Note that this can change quickly, so it may not actually be useful. But perhaps it will be in some use cases?
type DestinyComponentsProfilesDestinyProfileTransitoryJoinability struct {
	// ClosedReasons Reasons why a person can't join this person's fireteam.
	ClosedReasons *int32 `json:"closedReasons,omitempty"`

	// OpenSlots The number of slots still available on this person's fireteam.
	OpenSlots *int32 `json:"openSlots,omitempty"`

	// PrivacySetting Who the person is currently allowing invites from.
	PrivacySetting *int32 `json:"privacySetting,omitempty"`
}

// PartyMember This is some bare minimum information about a party member in a Fireteam. Unfortunately, without great computational expense on our side we can only get at the data contained here. I'd like to give you a character ID for example, but we don't have it. But we do have these three pieces of information. May they help you on your quest to show meaningful data about current Fireteams.
// Notably, we don't and can't feasibly return info on characters. If you can, try to use just the data below for your UI and purposes. Only hit us with further queries if you absolutely must know the character ID of the currently playing character. Pretty please with sugar on top.
type PartyMember struct {
	// DisplayName The player's last known display name.
	DisplayName *string `json:"displayName,omitempty"`

	// EmblemHash The identifier for the DestinyInventoryItemDefinition of the player's emblem.
	EmblemHash *uint32 `json:"emblemHash,omitempty"`

	// MembershipId The Membership ID that matches the party member.
	MembershipId *string `json:"membershipId,omitempty"`

	// Status A Flags Enumeration value indicating the states that the player is in relevant to being on a fireteam.
	Status *int32 `json:"status,omitempty"`
}

// DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry This represents a single "thing" being tracked by the player.
// This can point to many types of entities, but only a subset of them will actually have a valid hash identifier for whatever it is being pointed to.
// It's up to you to interpret what it means when various combinations of these entries have values being tracked.
type DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry struct {
	// ActivityHash OPTIONAL - If this is tracking the status of a DestinyActivityDefinition, this is the identifier for that activity.
	ActivityHash *uint32 `json:"activityHash"`

	// ItemHash OPTIONAL - If this is tracking the status of a DestinyInventoryItemDefinition, this is the identifier for that item.
	ItemHash *uint32 `json:"itemHash"`

	// LocationHash OPTIONAL - If this is tracking a DestinyLocationDefinition, this is the identifier for that location.
	LocationHash *uint32 `json:"locationHash"`

	// ObjectiveHash OPTIONAL - If this is tracking the status of a DestinyObjectiveDefinition, this is the identifier for that objective.
	ObjectiveHash *uint32 `json:"objectiveHash"`

	// QuestlineItemHash OPTIONAL - If this is tracking the status of a quest, this is the identifier for the DestinyInventoryItemDefinition that containst that questline data.
	QuestlineItemHash *uint32 `json:"questlineItemHash"`

	// TrackedDate OPTIONAL - I've got to level with you, I don't really know what this is. Is it when you started tracking it? Is it only populated for tracked items that have time limits?
	// I don't know, but we can get at it - when I get time to actually test what it is, I'll update this. In the meantime, bask in the mysterious data.
	TrackedDate *time.Time `json:"trackedDate"`
}

// DestinyComponentsRecordsDestinyCharacterRecordsComponent defines model for Destiny.Components.Records.DestinyCharacterRecordsComponent.
type DestinyComponentsRecordsDestinyCharacterRecordsComponent struct {
	FeaturedRecordHashes *[]uint32 `json:"featuredRecordHashes,omitempty"`

	// RecordCategoriesRootNodeHash The hash for the root presentation node definition of Triumph categories.
	RecordCategoriesRootNodeHash *uint32 `json:"recordCategoriesRootNodeHash,omitempty"`

	// RecordSealsRootNodeHash The hash for the root presentation node definition of Triumph Seals.
	RecordSealsRootNodeHash *uint32                                                    `json:"recordSealsRootNodeHash,omitempty"`
	Records                 *map[string]DestinyComponentsRecordsDestinyRecordComponent `json:"records,omitempty"`
}

// DestinyComponentsRecordsDestinyProfileRecordsComponent defines model for Destiny.Components.Records.DestinyProfileRecordsComponent.
type DestinyComponentsRecordsDestinyProfileRecordsComponent struct {
	// ActiveScore Your 'active' Triumphs score.
	ActiveScore *int32 `json:"activeScore,omitempty"`

	// LegacyScore Your 'legacy' Triumphs score.
	LegacyScore *int32 `json:"legacyScore,omitempty"`

	// LifetimeScore Your 'lifetime' Triumphs score.
	LifetimeScore *int32 `json:"lifetimeScore,omitempty"`

	// RecordCategoriesRootNodeHash The hash for the root presentation node definition of Triumph categories.
	RecordCategoriesRootNodeHash *uint32 `json:"recordCategoriesRootNodeHash,omitempty"`

	// RecordSealsRootNodeHash The hash for the root presentation node definition of Triumph Seals.
	RecordSealsRootNodeHash *uint32                                                    `json:"recordSealsRootNodeHash,omitempty"`
	Records                 *map[string]DestinyComponentsRecordsDestinyRecordComponent `json:"records,omitempty"`

	// Score Your 'active' Triumphs score, maintained for backwards compatibility.
	Score *int32 `json:"score,omitempty"`

	// TrackedRecordHash If this profile is tracking a record, this is the hash identifier of the record it is tracking.
	TrackedRecordHash *uint32 `json:"trackedRecordHash"`
}

// DestinyComponentsRecordsDestinyRecordComponent defines model for Destiny.Components.Records.DestinyRecordComponent.
type DestinyComponentsRecordsDestinyRecordComponent struct {
	// CompletedCount If available, this is the number of times this record has been completed. For example, the number of times a seal title has been gilded.
	CompletedCount         *int32                                   `json:"completedCount"`
	IntervalObjectives     *[]DestinyQuestsDestinyObjectiveProgress `json:"intervalObjectives,omitempty"`
	IntervalsRedeemedCount *int32                                   `json:"intervalsRedeemedCount,omitempty"`
	Objectives             *[]DestinyQuestsDestinyObjectiveProgress `json:"objectives,omitempty"`

	// RewardVisibilty If available, a list that describes which reward rewards should be shown (true) or hidden (false). This property is for regular record rewards, and not for interval objective rewards.
	RewardVisibilty *[]bool `json:"rewardVisibilty,omitempty"`
	State           *int32  `json:"state,omitempty"`
}

// DestinyComponentsSocialDestinySocialCommendationsComponent defines model for Destiny.Components.Social.DestinySocialCommendationsComponent.
type DestinyComponentsSocialDestinySocialCommendationsComponent struct {
	// CommendationNodePercentagesByHash The percentage for each commendation type out of total received
	CommendationNodePercentagesByHash *map[string]uint32 `json:"commendationNodePercentagesByHash,omitempty"`
	CommendationNodeScoresByHash      *map[string]int32  `json:"commendationNodeScoresByHash,omitempty"`
	CommendationScoresByHash          *map[string]int32  `json:"commendationScoresByHash,omitempty"`
	ScoreDetailValues                 *[]int32           `json:"scoreDetailValues,omitempty"`
	TotalScore                        *int32             `json:"totalScore,omitempty"`
}

// DestinyComponentsStringVariablesDestinyStringVariablesComponent defines model for Destiny.Components.StringVariables.DestinyStringVariablesComponent.
type DestinyComponentsStringVariablesDestinyStringVariablesComponent struct {
	IntegerValuesByHash *map[string]int32 `json:"integerValuesByHash,omitempty"`
}

// DestinyDefinitionsDestinyMaterialRequirement Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I'm not sure yet whether I regret that.
type DestinyDefinitionsDestinyMaterialRequirement struct {
	// Count The amount of the material required.
	Count *int32 `json:"count,omitempty"`

	// CountIsConstant If true, the material requirement count value is constant. Since The Witch Queen expansion, some material requirement counts can be dynamic and will need to be returned with an API call.
	CountIsConstant *bool `json:"countIsConstant,omitempty"`

	// DeleteOnAction If True, the material will be removed from the character's inventory when the action is performed.
	DeleteOnAction *bool `json:"deleteOnAction,omitempty"`

	// HasVirtualStackSize If true, this material requirement references a virtual item stack size value. You can get that value from a corresponding DestinyMaterialRequirementSetState.
	HasVirtualStackSize *bool `json:"hasVirtualStackSize,omitempty"`

	// ItemHash The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.
	ItemHash *uint32 `json:"itemHash,omitempty"`

	// OmitFromRequirements If True, this requirement is "silent": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI.
	OmitFromRequirements *bool `json:"omitFromRequirements,omitempty"`
}

// DestinyDefinitionsFireteamFinderDestinyActivityInteractableReference defines model for Destiny.Definitions.FireteamFinder.DestinyActivityInteractableReference.
type DestinyDefinitionsFireteamFinderDestinyActivityInteractableReference struct {
	ActivityInteractableElementIndex *int32  `json:"activityInteractableElementIndex,omitempty"`
	ActivityInteractableHash         *uint32 `json:"activityInteractableHash,omitempty"`
}

// DestinyDestinyActivity Represents the "Live" data that we can obtain about a Character's status with a specific Activity. This will tell you whether the character can participate in the activity, as well as some other basic mutable information.
// Meant to be combined with static DestinyActivityDefinition data for a full picture of the Activity.
type DestinyDestinyActivity struct {
	// ActivityHash The hash identifier of the Activity. Use this to look up the DestinyActivityDefinition of the activity.
	ActivityHash *uint32 `json:"activityHash,omitempty"`

	// BooleanActivityOptions The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).
	// As a concrete example of this data, the hashes you get for Raids will correspond to the currently active "Challenge Mode".
	// We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the "option" that is enabled/disabled) and the value (whether it's enabled or disabled presently)
	// On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.
	BooleanActivityOptions *map[string]bool `json:"booleanActivityOptions,omitempty"`

	// CanJoin If true, the user is allowed to join with another Fireteam in this activity.
	CanJoin *bool `json:"canJoin,omitempty"`

	// CanLead If true, the user is allowed to lead a Fireteam into this activity.
	CanLead    *bool                                      `json:"canLead,omitempty"`
	Challenges *[]DestinyChallengesDestinyChallengeStatus `json:"challenges,omitempty"`

	// DifficultyTier A DestinyActivityDifficultyTier enum value indicating the difficulty of the activity.
	DifficultyTier *int32 `json:"difficultyTier,omitempty"`

	// DisplayLevel The difficulty level of the activity, if applicable.
	DisplayLevel *int32 `json:"displayLevel"`

	// IsCompleted If true, we both have the ability to know that the user has completed this activity and they have completed it. Unfortunately, we can't necessarily know this for all activities. As such, this should probably only be used if you already know in advance which specific activities you wish to check.
	IsCompleted *bool `json:"isCompleted,omitempty"`

	// IsNew If true, then the activity should have a "new" indicator in the Director UI.
	IsNew *bool `json:"isNew,omitempty"`

	// IsVisible If true, the user should be able to see this activity.
	IsVisible *bool `json:"isVisible,omitempty"`

	// LoadoutRequirementIndex If returned, this is the index into the DestinyActivityDefinition's "loadouts" property, indicating the currently active loadout requirements.
	LoadoutRequirementIndex *int32 `json:"loadoutRequirementIndex"`

	// ModifierHashes If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.
	// Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
	ModifierHashes *[]uint32 `json:"modifierHashes,omitempty"`

	// RecommendedLight The recommended light level for the activity, if applicable.
	RecommendedLight *int32 `json:"recommendedLight"`
}

// DestinyDestinyItemQuantity Used in a number of Destiny contracts to return data about an item stack and its quantity. Can optionally return an itemInstanceId if the item is instanced - in which case, the quantity returned will be 1. If it's not... uh, let me know okay? Thanks.
type DestinyDestinyItemQuantity struct {
	// HasConditionalVisibility Indicates that this item quantity may be conditionally shown or hidden, based on various sources of state. For example: server flags, account state, or character progress.
	HasConditionalVisibility *bool `json:"hasConditionalVisibility,omitempty"`

	// ItemHash The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.
	ItemHash *uint32 `json:"itemHash,omitempty"`

	// ItemInstanceId If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.
	ItemInstanceId *int64 `json:"itemInstanceId"`

	// Quantity The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
	Quantity *int32 `json:"quantity,omitempty"`
}

// DestinyDestinyProgression Information about a current character's status with a Progression. A progression is a value that can increase with activity and has levels. Think Character Level and Reputation Levels. Combine this "live" data with the related DestinyProgressionDefinition for a full picture of the Progression.
type DestinyDestinyProgression struct {
	// CurrentProgress This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)
	CurrentProgress *int32 `json:"currentProgress,omitempty"`

	// CurrentResetCount The number of resets of this progression you've executed this season, if applicable to this progression.
	CurrentResetCount *int32 `json:"currentResetCount"`

	// DailyLimit If this progression has a daily limit, this is that limit.
	DailyLimit *int32 `json:"dailyLimit,omitempty"`

	// DailyProgress The amount of progress earned today for this progression.
	DailyProgress *int32 `json:"dailyProgress,omitempty"`

	// Level This is the level of the progression (for instance, the Character Level).
	Level *int32 `json:"level,omitempty"`

	// LevelCap This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)
	LevelCap *int32 `json:"levelCap,omitempty"`

	// NextLevelAt The total amount of progression (i.e. "Experience") needed in order to reach the next level.
	NextLevelAt *int32 `json:"nextLevelAt,omitempty"`

	// ProgressToNextLevel The amount of progression (i.e. "Experience") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.
	ProgressToNextLevel *int32 `json:"progressToNextLevel,omitempty"`

	// ProgressionHash The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.
	ProgressionHash *uint32 `json:"progressionHash,omitempty"`

	// RewardItemSocketOverrideStates Information about items stats and states that have socket overrides, if there is any data for it.
	RewardItemSocketOverrideStates *map[string]DestinyDestinyProgressionRewardItemSocketOverrideState `json:"rewardItemSocketOverrideStates,omitempty"`

	// RewardItemStates Information about historical rewards for this progression, if there is any data for it.
	RewardItemStates *[]int32 `json:"rewardItemStates,omitempty"`

	// SeasonResets Information about historical resets of this progression, if there is any data for it.
	SeasonResets *[]DestinyDestinyProgressionResetEntry `json:"seasonResets,omitempty"`

	// StepIndex Progressions define their levels in "steps". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the "steps" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)
	StepIndex *int32 `json:"stepIndex,omitempty"`

	// WeeklyLimit If this progression has a weekly limit, this is that limit.
	WeeklyLimit *int32 `json:"weeklyLimit,omitempty"`

	// WeeklyProgress The amount of progress earned toward this progression in the current week.
	WeeklyProgress *int32 `json:"weeklyProgress,omitempty"`
}

// DestinyDestinyProgressionResetEntry Represents a season and the number of resets you had in that season.
//
//	We do not necessarily - even for progressions with resets - track it over all seasons. So be careful and check the season numbers being returned.
type DestinyDestinyProgressionResetEntry struct {
	Resets *int32 `json:"resets,omitempty"`
	Season *int32 `json:"season,omitempty"`
}

// DestinyDestinyProgressionRewardItemSocketOverrideState Represents the stats and item state if applicable for progression reward items with socket overrides
type DestinyDestinyProgressionRewardItemSocketOverrideState struct {
	// ItemState Information about the item state, specifically deepsight if there is any data for it
	ItemState *int32 `json:"itemState,omitempty"`

	// RewardItemStats Information about the computed stats from socket and plug overrides for this progression, if there is any data for it.
	RewardItemStats *map[string]DestinyDestinyStat `json:"rewardItemStats,omitempty"`
}

// DestinyDestinyStat Represents a stat on an item *or* Character (NOT a Historical Stat, but a physical attribute stat like Attack, Defense etc...)
type DestinyDestinyStat struct {
	// StatHash The hash identifier for the Stat. Use it to look up the DestinyStatDefinition for static data about the stat.
	StatHash *uint32 `json:"statHash,omitempty"`

	// Value The current value of the Stat.
	Value *int32 `json:"value,omitempty"`
}

// DestinyDestinyTalentNode I see you've come to find out more about Talent Nodes. I'm so sorry. Talent Nodes are the conceptual, visual nodes that appear on Talent Grids. Talent Grids, in Destiny 1, were found on almost every instanced item: they had Nodes that could be activated to change the properties of the item. In Destiny 2, Talent Grids only exist for Builds/Subclasses, and while the basic concept is the same (Nodes can be activated once you've gained sufficient Experience on the Item, and provide effects), there are some new concepts from Destiny 1. Examine DestinyTalentGridDefinition and its subordinates for more information. This is the "Live" information for the current status of a Talent Node on a specific item. Talent Nodes have many Steps, but only one can be active at any one time: and it is the Step that determines both the visual and the game state-changing properties that the Node provides. Examine this and DestinyTalentNodeStepDefinition carefully. *IMPORTANT NOTE* Talent Nodes are, unfortunately, Content Version DEPENDENT. Though they refer to hashes for Nodes and Steps, those hashes are not guaranteed to be immutable across content versions. This is a source of great exasperation for me, but as a result anyone using Talent Grid data must ensure that the content version of their static content matches that of the server responses before showing or making decisions based on talent grid data.
type DestinyDestinyTalentNode struct {
	// ActivationGridLevel The progression level required on the Talent Grid in order to be able to activate this talent node. Talent Grids have their own Progression - similar to Character Level, but in this case it is experience related to the item itself.
	ActivationGridLevel *int32 `json:"activationGridLevel,omitempty"`

	// Hidden Whether or not the talent node is actually visible in the game's UI. Whether you want to show it in your own UI is up to you! I'm not gonna tell you who to sock it to.
	Hidden *bool `json:"hidden,omitempty"`

	// IsActivated If true, the node is activated: it's current step then provides its benefits.
	IsActivated *bool `json:"isActivated,omitempty"`

	// MaterialsToUpgrade If the node has material requirements to be activated, this is the list of those requirements.
	MaterialsToUpgrade *[]DestinyDefinitionsDestinyMaterialRequirement `json:"materialsToUpgrade,omitempty"`

	// NodeHash The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes). Deceptively CONTENT VERSION DEPENDENT. We have no guarantee of the hash's immutability between content versions.
	NodeHash *uint32 `json:"nodeHash,omitempty"`

	// NodeIndex The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]). CONTENT VERSION DEPENDENT.
	NodeIndex *int32 `json:"nodeIndex,omitempty"`

	// NodeStatsBlock This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.
	NodeStatsBlock *DestinyDestinyTalentNodeStatBlock `json:"nodeStatsBlock,omitempty"`

	// ProgressPercent If you want to show a progress bar or circle for how close this talent node is to being activate-able, this is the percentage to show. It follows the node's underlying rules about when the progress bar should first show up, and when it should be filled.
	ProgressPercent *float32 `json:"progressPercent,omitempty"`

	// State An DestinyTalentNodeState enum value indicating the node's state: whether it can be activated or swapped, and why not if neither can be performed.
	State *int32 `json:"state,omitempty"`

	// StepIndex The currently relevant Step for the node. It is this step that has rendering data for the node and the benefits that are provided if the node is activated. (the actual rules for benefits provided are extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worry about a lot of those old Destiny 1 rules.) This is an index into: DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]
	StepIndex *int32 `json:"stepIndex,omitempty"`
}

// DestinyDestinyTalentNodeStatBlock This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.
type DestinyDestinyTalentNodeStatBlock struct {
	// CurrentStepStats The stat benefits conferred when this talent node is activated for the current Step that is active on the node.
	CurrentStepStats *[]DestinyDestinyStat `json:"currentStepStats,omitempty"`

	// NextStepStats This is a holdover from the old days of Destiny 1, when a node could be activated multiple times, conferring multiple steps worth of benefits: you would use this property to show what activating the "next" step on the node would provide vs. what the current step is providing. While Nodes are currently not being used this way, the underlying system for this functionality still exists. I hesitate to remove this property while the ability for designers to make such a talent grid still exists. Whether you want to show it is up to you.
	NextStepStats *[]DestinyDestinyStat `json:"nextStepStats,omitempty"`
}

// DestinyDyeReference defines model for Destiny.DyeReference.
type DestinyDyeReference struct {
	ChannelHash *uint32 `json:"channelHash,omitempty"`
	DyeHash     *uint32 `json:"dyeHash,omitempty"`
}

// DestinyEntitiesCharactersDestinyCharacterActivitiesComponent This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.
type DestinyEntitiesCharactersDestinyCharacterActivitiesComponent = CharacterActivitiesComponent

// CurrentActivityModeType And the current activity's most specific mode type, if it can be found.
type CurrentActivityModeType int32

// CharacterActivitiesComponent This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.
type CharacterActivitiesComponent struct {
	// AvailableActivities The list of activities that the user can play.
	AvailableActivities *[]DestinyDestinyActivity `json:"availableActivities,omitempty"`

	// AvailableActivityInteractables The list of activity interactables that the player can interact with.
	AvailableActivityInteractables *[]DestinyDefinitionsFireteamFinderDestinyActivityInteractableReference `json:"availableActivityInteractables,omitempty"`

	// CurrentActivityHash If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP "Activities" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.
	CurrentActivityHash *uint32 `json:"currentActivityHash,omitempty"`

	// CurrentActivityModeHash If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
	CurrentActivityModeHash *uint32 `json:"currentActivityModeHash,omitempty"`

	// CurrentActivityModeHashes If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
	CurrentActivityModeHashes *[]uint32 `json:"currentActivityModeHashes,omitempty"`

	// CurrentActivityModeType And the current activity's most specific mode type, if it can be found.
	CurrentActivityModeType *CurrentActivityModeType `json:"currentActivityModeType"`

	// CurrentActivityModeTypes All Activity Modes that apply to the current activity being played, in enum form.
	CurrentActivityModeTypes *[]int32 `json:"currentActivityModeTypes,omitempty"`

	// CurrentPlaylistActivityHash If the user is in a playlist, this is the hash identifier for the playlist that they chose.
	CurrentPlaylistActivityHash *uint32 `json:"currentPlaylistActivityHash"`

	// DateActivityStarted The last date that the user started playing an activity.
	DateActivityStarted *time.Time `json:"dateActivityStarted,omitempty"`

	// LastCompletedStoryHash This will have the activity hash of the last completed story/campaign mission, in case you care about that.
	LastCompletedStoryHash *uint32 `json:"lastCompletedStoryHash,omitempty"`
}

// CharacterComponent This component contains base properties of the character. You'll probably want to always request this component, but hey you do you.
type CharacterComponent struct {
	// BaseCharacterLevel The "base" level of your character, not accounting for any light level.
	BaseCharacterLevel *int32 `json:"baseCharacterLevel,omitempty"`

	// CharacterId The unique identifier for the character.
	CharacterId *string `json:"characterId,omitempty"`

	// ClassHash Use this hash to look up the character's DestinyClassDefinition.
	ClassHash *uint32 `json:"classHash,omitempty"`

	// ClassType Mostly for historical purposes at this point, this is an enumeration for the character's class.
	// It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
	ClassType *int32 `json:"classType,omitempty"`

	// DateLastPlayed The last date that the user played Destiny.
	DateLastPlayed *time.Time `json:"dateLastPlayed,omitempty"`

	// EmblemBackgroundPath A shortcut path to the user's currently equipped emblem background image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
	EmblemBackgroundPath *string `json:"emblemBackgroundPath,omitempty"`

	// EmblemColor A shortcut for getting the background color of the user's currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.
	EmblemColor *DestinyMiscDestinyColor `json:"emblemColor,omitempty"`

	// EmblemHash The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.
	EmblemHash *uint32 `json:"emblemHash,omitempty"`

	// EmblemPath A shortcut path to the user's currently equipped emblem image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
	EmblemPath *string `json:"emblemPath,omitempty"`

	// GenderHash Use this hash to look up the character's DestinyGenderDefinition.
	GenderHash *uint32 `json:"genderHash,omitempty"`

	// GenderType Mostly for historical purposes at this point, this is an enumeration for the character's Gender.
	// It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it's an enumeration and not a boolean. Fight me.
	GenderType *int32 `json:"genderType,omitempty"`

	// LevelProgression The progression that indicates your character's level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.
	LevelProgression *DestinyDestinyProgression `json:"levelProgression,omitempty"`

	// Light The user's calculated "Light Level". Light level is an indicator of your power that mostly matters in the end game, once you've reached the maximum character level: it's a level that's dependent on the average Attack/Defense power of your items.
	Light *int32 `json:"light,omitempty"`

	// MembershipId Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.
	MembershipId *string `json:"membershipId,omitempty"`

	// MembershipType membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.
	MembershipType *int32 `json:"membershipType,omitempty"`

	// MinutesPlayedThisSession If the user is currently playing, this is how long they've been playing.
	MinutesPlayedThisSession *string `json:"minutesPlayedThisSession,omitempty"`

	// MinutesPlayedTotal If this value is 525,600, then they played Destiny for a year. Or they're a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.
	MinutesPlayedTotal *string `json:"minutesPlayedTotal,omitempty"`

	// PercentToNextLevel A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.
	PercentToNextLevel *float32 `json:"percentToNextLevel,omitempty"`

	// RaceHash Use this hash to look up the character's DestinyRaceDefinition.
	RaceHash *uint32 `json:"raceHash,omitempty"`

	// RaceType Mostly for historical purposes at this point, this is an enumeration for the character's race.
	// It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
	RaceType *int32 `json:"raceType,omitempty"`

	// Stats Your character's stats, such as Agility, Resilience, etc... *not* historical stats.
	// You'll have to call a different endpoint for those.
	Stats *map[string]int32 `json:"stats,omitempty"`

	// TitleRecordHash If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.
	TitleRecordHash *uint32 `json:"titleRecordHash"`
}

// DestinyEntitiesCharactersDestinyCharacterProgressionComponent This component returns anything that could be considered "Progression" on a user: data where the user is gaining levels, reputation, completions, rewards, etc...
type DestinyEntitiesCharactersDestinyCharacterProgressionComponent struct {
	// Checklists The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)
	// For each checklist returned, its value is itself a Dictionary keyed by the checklist's hash identifier with the value being a boolean indicating if it's been discovered yet.
	Checklists *map[string]map[string]bool `json:"checklists,omitempty"`

	// Factions A dictionary of all known Factions, keyed by the Faction's hash. It contains data about this character's status with the faction.
	Factions *map[string]DestinyProgressionDestinyFactionProgression `json:"factions,omitempty"`

	// Milestones Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone's status.
	Milestones *map[string]DestinyMilestonesDestinyMilestone `json:"milestones,omitempty"`

	// Progressions A Dictionary of all known progressions for the Character, keyed by the Progression's hash.
	// Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition.
	Progressions *map[string]DestinyDestinyProgression `json:"progressions,omitempty"`

	// Quests If the user has any active quests, the quests' statuses will be returned here.
	//  Note that quests have been largely supplanted by Milestones, but that doesn't mean that they won't make a comeback independent of milestones at some point.
	//  (Fun fact: quests came back as I feared they would, but we never looped back to populate this... I'm going to put that in the backlog.)
	Quests *[]DestinyQuestsDestinyQuestStatus `json:"quests,omitempty"`

	// SeasonalArtifact Data related to your progress on the current season's artifact that can vary per character.
	SeasonalArtifact *DestinyArtifactsDestinyArtifactCharacterScoped `json:"seasonalArtifact,omitempty"`

	// UninstancedItemObjectives Sometimes, you have items in your inventory that don't have instances, but still have Objective information. This provides you that objective information for uninstanced items.
	// This dictionary is keyed by the item's hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses.
	UninstancedItemObjectives *map[string][]DestinyQuestsDestinyObjectiveProgress `json:"uninstancedItemObjectives,omitempty"`

	// UninstancedItemPerks Sometimes, you have items in your inventory that don't have instances, but still have perks (for example: Trials passage cards). This gives you the perk information for uninstanced items.
	// This dictionary is keyed by item hash, which you can use to look up the corresponding item definition. The value is the list of perks states for the item.
	UninstancedItemPerks *map[string]DestinyEntitiesItemsDestinyItemPerksComponent `json:"uninstancedItemPerks,omitempty"`
}

// DestinyEntitiesCharactersDestinyCharacterRenderComponent Only really useful if you're attempting to render the character's current appearance in 3D, this returns a bare minimum of information, pre-aggregated, that you'll need to perform that rendering. Note that you need to combine this with other 3D assets and data from our servers.
// Examine the Javascript returned by https://bungie.net/sharedbundle/spasm to see how we use this data, but be warned: the rabbit hole goes pretty deep.
type DestinyEntitiesCharactersDestinyCharacterRenderComponent struct {
	// CustomDyes Custom dyes, calculated by iterating over the character's equipped items. Useful for pre-fetching all of the dye data needed from our server.
	CustomDyes *[]DestinyDyeReference `json:"customDyes,omitempty"`

	// Customization This is actually something that Spasm.js *doesn't* do right now, and that we don't return assets for yet. This is the data about what character customization options you picked. You can combine this with DestinyCharacterCustomizationOptionDefinition to show some cool info, and hopefully someday to actually render a user's face in 3D. We'll see if we ever end up with time for that.
	Customization *DestinyCharacterDestinyCharacterCustomization `json:"customization,omitempty"`

	// PeerView A minimal view of:
	// - Equipped items
	// - The rendering-related custom options on those equipped items
	// Combined, that should be enough to render all of the items on the equipped character.
	PeerView *DestinyCharacterDestinyCharacterPeerView `json:"peerView,omitempty"`
}

// DestinyEntitiesInventoryDestinyInventoryComponent A list of minimal information for items in an inventory: be it a character's inventory, or a Profile's inventory. (Note that the Vault is a collection of inventory buckets in the Profile's inventory)
// Inventory Items returned here are in a flat list, but importantly they have a bucketHash property that indicates the specific inventory bucket that is holding them. These buckets constitute things like the separate sections of the Vault, the user's inventory slots, etc. See DestinyInventoryBucketDefinition for more info.
type DestinyEntitiesInventoryDestinyInventoryComponent struct {
	// Items The items in this inventory. If you care to bucket them, use the item's bucketHash property to group them.
	Items *[]ItemComponent `json:"items,omitempty"`
}

// ItemComponent The base item component, filled with properties that are generally useful to know in any item request or that don't feel worthwhile to put in their own component.
type ItemComponent struct {
	// BindStatus If the item is bound to a location, it will be specified in this enum.
	BindStatus *int32 `json:"bindStatus,omitempty"`

	// BucketHash The hash identifier for the specific inventory bucket in which the item is located.
	BucketHash *uint32 `json:"bucketHash,omitempty"`

	// ExpirationDate If the item can expire, this is the date at which it will/did expire.
	ExpirationDate *time.Time `json:"expirationDate"`

	// IsWrapper If this is true, the object is actually a "wrapper" of the object it's representing. This means that it's not the actual item itself, but rather an item that must be "opened" in game before you have and can use the item.
	//  Wrappers are an evolution of "bundles", which give an easy way to let you preview the contents of what you purchased while still letting you get a refund before you "open" it.
	IsWrapper *bool `json:"isWrapper,omitempty"`

	// ItemHash The identifier for the item's definition, which is where most of the useful static information for the item can be found.
	ItemHash *uint32 `json:"itemHash,omitempty"`

	// ItemInstanceId If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.
	ItemInstanceId *string `json:"itemInstanceId"`

	// ItemValueVisibility If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).
	ItemValueVisibility *[]bool `json:"itemValueVisibility,omitempty"`

	// Location An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.
	Location *int32 `json:"location,omitempty"`

	// Lockable If the item can be locked, this will indicate that state.
	Lockable *bool `json:"lockable,omitempty"`

	// MetricHash The identifier for the currently-selected metric definition, to be displayed on the emblem nameplate.
	MetricHash *uint32 `json:"metricHash"`

	// MetricObjective The objective progress for the currently-selected metric definition, to be displayed on the emblem nameplate.
	MetricObjective *DestinyQuestsDestinyObjectiveProgress `json:"metricObjective,omitempty"`

	// OverrideStyleItemHash If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
	// If you don't do this, certain items whose styles are being overridden by socketed items - such as the "Recycle Shader" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
	OverrideStyleItemHash *uint32 `json:"overrideStyleItemHash"`

	// Quantity The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)
	Quantity *int32 `json:"quantity,omitempty"`

	// State A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it's tracked or locked for example, or whether it has a masterwork plug inserted.
	State *int32 `json:"state,omitempty"`

	// TooltipNotificationIndexes If this is populated, it is a list of indexes into DestinyInventoryItemDefinition.tooltipNotifications for any special tooltip messages that need to be shown for this item.
	TooltipNotificationIndexes *[]int32 `json:"tooltipNotificationIndexes,omitempty"`

	// TransferStatus If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).
	TransferStatus *int32 `json:"transferStatus,omitempty"`

	// VersionNumber The version of this item, used to index into the versions list in the item definition quality block.
	VersionNumber *int32 `json:"versionNumber"`
}

// ItemInstanceComponent If an item is "instanced", this will contain information about the item's instance that doesn't fit easily into other components. One might say this is the "essential" instance data for the item.
// Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.
// You can tell from an item's definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition's definition.inventory.isInstanceItem property.
type ItemInstanceComponent struct {
	// BreakerType If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.
	BreakerType *DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType `json:"breakerType"`

	// BreakerTypeHash If populated, this is the hash identifier for the item's breaker type. See DestinyBreakerTypeDefinition for more details.
	BreakerTypeHash *uint32 `json:"breakerTypeHash"`

	// CanEquip If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.
	CanEquip *bool `json:"canEquip,omitempty"`

	// CannotEquipReason If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.
	CannotEquipReason *int32 `json:"cannotEquipReason,omitempty"`

	// DamageType If the item has a damage type, this is the item's current damage type.
	DamageType *int32 `json:"damageType,omitempty"`

	// DamageTypeHash The current damage type's hash, so you can look up localized info and icons for it.
	DamageTypeHash *uint32 `json:"damageTypeHash"`

	// Energy IF populated, this item supports Energy mechanics (i.e. Armor 2.0), and these are the current details of its energy type and available capacity to spend energy points.
	Energy *DestinyEntitiesItemsDestinyItemInstanceEnergy `json:"energy,omitempty"`

	// EquipRequiredLevel If the item cannot be equipped until you reach a certain level, that level will be reflected here.
	EquipRequiredLevel *int32 `json:"equipRequiredLevel,omitempty"`

	// IsEquipped Is the item currently equipped on the given character?
	IsEquipped *bool `json:"isEquipped,omitempty"`

	// ItemLevel The Item's "Level" has the most significant bearing on its stats, such as Light and Power.
	ItemLevel *int32 `json:"itemLevel,omitempty"`

	// PrimaryStat The item stat that we consider to be "primary" for the item. For instance, this would be "Attack" for Weapons or "Defense" for armor.
	PrimaryStat *DestinyDestinyStat `json:"primaryStat,omitempty"`

	// Quality The "Quality" of the item has a lesser - but still impactful - bearing on stats like Light and Power.
	Quality *int32 `json:"quality,omitempty"`

	// UnlockHashesRequiredToEquip Sometimes, there are limitations to equipping that are represented by character-level flags called "unlocks".
	// This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.
	UnlockHashesRequiredToEquip *[]uint32 `json:"unlockHashesRequiredToEquip,omitempty"`
}

// DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.
type DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType int32

// DestinyEntitiesItemsDestinyItemInstanceEnergy defines model for Destiny.Entities.Items.DestinyItemInstanceEnergy.
type DestinyEntitiesItemsDestinyItemInstanceEnergy struct {
	// EnergyCapacity The total capacity of Energy that the item currently has, regardless of if it is currently being used.
	EnergyCapacity *int32 `json:"energyCapacity,omitempty"`

	// EnergyType This is the enum version of the Energy Type value, for convenience.
	EnergyType *int32 `json:"energyType,omitempty"`

	// EnergyTypeHash The type of energy for this item. Plugs that require Energy can only be inserted if they have the "Any" Energy Type or the matching energy type of this item. This is a reference to the DestinyEnergyTypeDefinition for the energy type, where you can find extended info about it.
	EnergyTypeHash *uint32 `json:"energyTypeHash,omitempty"`

	// EnergyUnused The amount of energy still available for inserting new plugs.
	EnergyUnused *int32 `json:"energyUnused,omitempty"`

	// EnergyUsed The amount of Energy currently in use by inserted plugs.
	EnergyUsed *int32 `json:"energyUsed,omitempty"`
}

// DestinyEntitiesItemsDestinyItemObjectivesComponent Items can have objectives and progression. When you request this block, you will obtain information about any Objectives and progression tied to this item.
type DestinyEntitiesItemsDestinyItemObjectivesComponent struct {
	// DateCompleted If we have any information on when these objectives were completed, this will be the date of that completion. This won't be on many items, but could be interesting for some items that do store this information.
	DateCompleted *time.Time `json:"dateCompleted"`

	// FlavorObjective I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for "flavor" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.
	FlavorObjective *DestinyQuestsDestinyObjectiveProgress `json:"flavorObjective,omitempty"`

	// Objectives If the item has a hard association with objectives, your progress on them will be defined here.
	// Objectives are our standard way to describe a series of tasks that have to be completed for a reward.
	Objectives *[]DestinyQuestsDestinyObjectiveProgress `json:"objectives,omitempty"`
}

// DestinyEntitiesItemsDestinyItemPerksComponent Instanced items can have perks: benefits that the item bestows.
// These are related to DestinySandboxPerkDefinition, and sometimes - but not always - have human readable info. When they do, they are the icons and text that you see in an item's tooltip.
// Talent Grids, Sockets, and the item itself can apply Perks, which are then summarized here for your convenience.
type DestinyEntitiesItemsDestinyItemPerksComponent struct {
	// Perks The list of perks to display in an item tooltip - and whether or not they have been activated.
	Perks *[]DestinyPerksDestinyPerkReference `json:"perks,omitempty"`
}

// DestinyEntitiesItemsDestinyItemRenderComponent Many items can be rendered in 3D. When you request this block, you will obtain the custom data needed to render this specific instance of the item.
type DestinyEntitiesItemsDestinyItemRenderComponent struct {
	// ArtRegions A dictionary for rendering gear components, with:
	// key = Art Arrangement Region Index
	// value = The chosen Arrangement Index for the Region, based on the value of a stat on the item used for making the choice.
	ArtRegions *map[string]int32 `json:"artRegions,omitempty"`

	// UseCustomDyes If you should use custom dyes on this item, it will be indicated here.
	UseCustomDyes *bool `json:"useCustomDyes,omitempty"`
}

// DestinyEntitiesItemsDestinyItemSocketState The status of a given item's socket. (which plug is inserted, if any: whether it is enabled, what "reusable" plugs can be inserted, etc...)
// If I had it to do over, this would probably have a DestinyItemPlug representing the inserted item instead of most of these properties. :shrug:
type DestinyEntitiesItemsDestinyItemSocketState struct {
	// EnableFailIndexes If a plug is inserted but not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
	EnableFailIndexes *[]int32 `json:"enableFailIndexes,omitempty"`

	// IsEnabled Even if a plug is inserted, it doesn't mean it's enabled.
	// This flag indicates whether the plug is active and providing its benefits.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// IsVisible A plug may theoretically provide benefits but not be visible - for instance, some older items use a plug's damage type perk to modify their own damage type. These, though they are not visible, still affect the item. This field indicates that state.
	// An invisible plug, while it provides benefits if it is Enabled, cannot be directly modified by the user.
	IsVisible *bool `json:"isVisible,omitempty"`

	// PlugHash The currently active plug, if any.
	// Note that, because all plugs are statically defined, its effect on stats and perks can be statically determined using the plug item's definition. The stats and perks can be taken at face value on the plug item as the stats and perks it will provide to the user/item.
	PlugHash *uint32 `json:"plugHash"`
}

// DestinyEntitiesItemsDestinyItemSocketsComponent Instanced items can have sockets, which are slots on the item where plugs can be inserted.
// Sockets are a bit complex: be sure to examine the documentation on the DestinyInventoryItemDefinition's "socket" block and elsewhere on these objects for more details.
type DestinyEntitiesItemsDestinyItemSocketsComponent struct {
	// Sockets The list of all sockets on the item, and their status information.
	Sockets *[]DestinyEntitiesItemsDestinyItemSocketState `json:"sockets,omitempty"`
}

// DestinyEntitiesItemsDestinyItemStatsComponent If you want the stats on an item's instanced data, get this component.
// These are stats like Attack, Defense etc... and *not* historical stats.
// Note that some stats have additional computation in-game at runtime - for instance, Magazine Size - and thus these stats might not be 100% accurate compared to what you see in-game for some stats. I know, it sucks. I hate it too.
type DestinyEntitiesItemsDestinyItemStatsComponent struct {
	// Stats If the item has stats that it provides (damage, defense, etc...), it will be given here.
	Stats *map[string]DestinyDestinyStat `json:"stats,omitempty"`
}

// DestinyEntitiesItemsDestinyItemTalentGridComponent Well, we're here in Destiny 2, and Talent Grids are unfortunately still around.
// The good news is that they're pretty much only being used for certain base information on items and for Builds/Subclasses. The bad news is that they still suck. If you really want this information, grab this component.
// An important note is that talent grids are defined as such:
// A Grid has 1:M Nodes, which has 1:M Steps.
// Any given node can only have a single step active at one time, which represents the actual visual contents and effects of the Node (for instance, if you see a "Super Cool Bonus" node, the actual icon and text for the node is coming from the current Step of that node).
// Nodes can be grouped into exclusivity sets *and* as of D2, exclusivity groups (which are collections of exclusivity sets that affect each other).
// See DestinyTalentGridDefinition for more information. Brace yourself, the water's cold out there in the deep end.
type DestinyEntitiesItemsDestinyItemTalentGridComponent struct {
	// GridProgression If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.
	GridProgression *DestinyDestinyProgression `json:"gridProgression,omitempty"`

	// IsGridComplete Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.
	// Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)
	IsGridComplete *bool `json:"isGridComplete,omitempty"`

	// Nodes Detailed information about the individual nodes in the talent grid.
	// A node represents a single visual "pip" in the talent grid or Build detail view, though each node may have multiple "steps" which indicate the actual bonuses and visual representation of that node.
	Nodes *[]DestinyDestinyTalentNode `json:"nodes,omitempty"`

	// TalentGridHash Most items don't have useful talent grids anymore, but Builds in particular still do.
	// You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.
	TalentGridHash *uint32 `json:"talentGridHash,omitempty"`
}

// DestinyEntitiesProfilesDestinyProfileComponent The most essential summary information about a Profile (in Destiny 1, we called these "Accounts").
type DestinyEntitiesProfilesDestinyProfileComponent struct {
	// ActiveEventCardHash If populated, this is a reference to the event card that is currently active.
	ActiveEventCardHash *uint32 `json:"activeEventCardHash"`

	// CharacterIds A list of the character IDs, for further querying on your part.
	CharacterIds *[]int64 `json:"characterIds,omitempty"`

	// CurrentGuardianRank The 'current' Guardian Rank value, which starts at rank 1. This rank value will drop at the start of a new season to your 'renewed' rank from the previous season.
	CurrentGuardianRank *int32 `json:"currentGuardianRank,omitempty"`

	// CurrentSeasonHash If populated, this is a reference to the season that is currently active.
	CurrentSeasonHash *uint32 `json:"currentSeasonHash"`

	// CurrentSeasonRewardPowerCap If populated, this is the reward power cap for the current season.
	CurrentSeasonRewardPowerCap *int32 `json:"currentSeasonRewardPowerCap"`

	// DateLastPlayed The last time the user played with any character on this Profile.
	DateLastPlayed *time.Time `json:"dateLastPlayed,omitempty"`

	// EventCardHashesOwned A list of hashes for event cards that a profile owns. Unlike most values in versionsOwned, these stay with the profile across all platforms.
	EventCardHashesOwned *[]uint32 `json:"eventCardHashesOwned,omitempty"`

	// LifetimeHighestGuardianRank The 'lifetime highest' Guardian Rank value, which starts at rank 1. This rank value should never go down.
	LifetimeHighestGuardianRank *int32 `json:"lifetimeHighestGuardianRank,omitempty"`

	// RenewedGuardianRank The seasonal 'renewed' Guardian Rank value. This rank value resets at the start of each new season to the highest-earned non-advanced rank.
	RenewedGuardianRank *int32 `json:"renewedGuardianRank,omitempty"`

	// SeasonHashes A list of seasons that this profile owns. Unlike versionsOwned, these stay with the profile across Platforms, and thus will be valid.
	//  It turns out that Stadia Pro subscriptions will give access to seasons but only while playing on Stadia and with an active subscription. So some users (users who have Stadia Pro but choose to play on some other platform) won't see these as available: it will be whatever seasons are available for the platform on which they last played.
	SeasonHashes *[]uint32 `json:"seasonHashes,omitempty"`

	// UserInfo If you need to render the Profile (their platform name, icon, etc...) somewhere, this property contains that information.
	UserInfo *UserUserInfoCard `json:"userInfo,omitempty"`

	// VersionsOwned If you want to know what expansions they own, this will contain that data.
	//  IMPORTANT: This field may not return the data you're interested in for Cross-Saved users. It returns the last ownership data we saw for this account - which is to say, what they've purchased on the platform on which they last played, which now could be a different platform.
	//  If you don't care about per-platform ownership and only care about whatever platform it seems they are playing on most recently, then this should be "good enough." Otherwise, this should be considered deprecated. We do not have a good alternative to provide at this time with platform specific ownership data for DLC.
	VersionsOwned *int32 `json:"versionsOwned,omitempty"`
}

// DestinyEntitiesProfilesDestinyVendorReceiptsComponent For now, this isn't used for much: it's a record of the recent refundable purchases that the user has made. In the future, it could be used for providing refunds/buyback via the API. Wouldn't that be fun?
type DestinyEntitiesProfilesDestinyVendorReceiptsComponent struct {
	// Receipts The receipts for refundable purchases made at a vendor.
	Receipts *[]DestinyVendorsDestinyVendorReceipt `json:"receipts,omitempty"`
}

// DestinyHistoricalStatsDestinyActivityHistoryResults defines model for Destiny.HistoricalStats.DestinyActivityHistoryResults.
type DestinyHistoricalStatsDestinyActivityHistoryResults struct {
	// Activities List of activities, the most recent activity first.
	Activities *[]StatsPeriodGroup `json:"activities,omitempty"`
}

// HistoricalStatsActivity Summary information about the activity that was played.
type HistoricalStatsActivity struct {
	// DirectorActivityHash The unique hash identifier of the DestinyActivityDefinition that was played.
	DirectorActivityHash *uint32 `json:"directorActivityHash,omitempty"`

	// InstanceId The unique identifier for this *specific* match that was played.
	// This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.
	InstanceId *string `json:"instanceId,omitempty"`

	// IsPrivate Whether or not the match was a private match.
	IsPrivate *bool `json:"isPrivate,omitempty"`

	// MembershipType The Membership Type indicating the platform on which this match was played.
	MembershipType *int32 `json:"membershipType,omitempty"`

	// Mode Indicates the most specific game mode of the activity that we could find.
	Mode *int32 `json:"mode,omitempty"`

	// Modes The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.
	Modes *[]int32 `json:"modes,omitempty"`

	// ReferenceId The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it'd be named activityHash. Too late now.
	ReferenceId *uint32 `json:"referenceId,omitempty"`
}

// StatsPeriodGroup defines model for Destiny.HistoricalStats.DestinyHistoricalStatsPeriodGroup.
type StatsPeriodGroup struct {
	// ActivityDetails If the period group is for a specific activity, this property will be set.
	ActivityDetails *HistoricalStatsActivity `json:"activityDetails,omitempty"`

	// Period Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is 'all time'.
	Period *time.Time `json:"period,omitempty"`

	// Values Collection of stats for the period.
	Values *map[string]HistoricalStatsValue `json:"values,omitempty"`
}

// HistoricalStatsValue defines model for Destiny.HistoricalStats.DestinyHistoricalStatsValue.
type HistoricalStatsValue struct {
	// ActivityId When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
	ActivityId *int64 `json:"activityId"`

	// Basic Basic stat value.
	Basic *DestinyHistoricalStatsDestinyHistoricalStatsValuePair `json:"basic,omitempty"`

	// Pga Per game average for the statistic, if applicable
	Pga *DestinyHistoricalStatsDestinyHistoricalStatsValuePair `json:"pga,omitempty"`

	// StatId Unique ID for this stat
	StatId *string `json:"statId,omitempty"`

	// Weighted Weighted value of the stat if a weight greater than 1 has been assigned.
	Weighted *DestinyHistoricalStatsDestinyHistoricalStatsValuePair `json:"weighted,omitempty"`
}

// DestinyHistoricalStatsDestinyHistoricalStatsValuePair defines model for Destiny.HistoricalStats.DestinyHistoricalStatsValuePair.
type DestinyHistoricalStatsDestinyHistoricalStatsValuePair struct {
	// DisplayValue Localized formated version of the value.
	DisplayValue *string `json:"displayValue,omitempty"`

	// Value Raw value of the statistic
	Value *float64 `json:"value,omitempty"`
}

// HistoricalWeaponStats defines model for Destiny.HistoricalStats.DestinyHistoricalWeaponStats.
type HistoricalWeaponStats struct {
	// ReferenceId The hash ID of the item definition that describes the weapon.
	ReferenceId *uint32 `json:"referenceId,omitempty"`

	// Values Collection of stats for the period.
	Values *map[string]HistoricalStatsValue `json:"values,omitempty"`
}

// DestinyHistoricalStatsDestinyPlayer defines model for Destiny.HistoricalStats.DestinyPlayer.
type DestinyHistoricalStatsDestinyPlayer = DestinyPlayer

// DestinyPlayer defines model for .
type DestinyPlayer struct {
	// BungieNetUserInfo Details about the player as they are known on BungieNet. This will be undefined if the player has marked their credential private, or does not have a BungieNet account.
	BungieNetUserInfo *UserUserInfoCard `json:"bungieNetUserInfo,omitempty"`

	// CharacterClass Class of the character if applicable and available.
	CharacterClass *string `json:"characterClass,omitempty"`

	// CharacterLevel Level of the character if available. Zero if it is not available.
	CharacterLevel *int32 `json:"characterLevel,omitempty"`

	// ClanName Current clan name for the player. This value may be null or an empty string if the user does not have a clan.
	ClanName *string `json:"clanName,omitempty"`

	// ClanTag Current clan tag for the player. This value may be null or an empty string if the user does not have a clan.
	ClanTag   *string `json:"clanTag,omitempty"`
	ClassHash *uint32 `json:"classHash,omitempty"`

	// DestinyUserInfo Details about the player as they are known in game (platform display name, Destiny emblem)
	DestinyUserInfo *UserUserInfoCard `json:"destinyUserInfo,omitempty"`

	// EmblemHash If we know the emblem's hash, this can be used to look up the player's emblem at the time of a match when receiving PGCR data, or otherwise their currently equipped emblem (if we are able to obtain it).
	EmblemHash *uint32 `json:"emblemHash,omitempty"`
	GenderHash *uint32 `json:"genderHash,omitempty"`

	// LightLevel Light Level of the character if available. Zero if it is not available.
	LightLevel *int32  `json:"lightLevel,omitempty"`
	RaceHash   *uint32 `json:"raceHash,omitempty"`
}

// PostGameCarnageReportData defines model for Destiny.HistoricalStats.DestinyPostGameCarnageReportData.
type PostGameCarnageReportData struct {
	// ActivityDetails Details about the activity.
	ActivityDetails *HistoricalStatsActivity `json:"activityDetails,omitempty"`

	// ActivityWasStartedFromBeginning True if the activity was started from the beginning, if that information is available and the activity was played post Witch Queen release.
	ActivityWasStartedFromBeginning *bool `json:"activityWasStartedFromBeginning"`

	// Entries Collection of players and their data for this activity.
	Entries *[]PostGameCarnageReportEntry `json:"entries,omitempty"`

	// Period Date and time for the activity.
	Period *time.Time `json:"period,omitempty"`

	// StartingPhaseIndex If this activity has "phases", this is the phase at which the activity was started. This value is only valid for activities before the Beyond Light expansion shipped. Subsequent activities will not have a valid value here.
	StartingPhaseIndex *int32 `json:"startingPhaseIndex"`

	// Teams Collection of stats for the player in this activity.
	Teams *[]TeamEntry `json:"teams,omitempty"`
}

// PostGameCarnageReportEntry defines model for Destiny.HistoricalStats.DestinyPostGameCarnageReportEntry.
type PostGameCarnageReportEntry struct {
	// CharacterId ID of the player's character used in the activity.
	CharacterId *string `json:"characterId,omitempty"`

	// Extended Extended data extracted from the activity blob.
	Extended *PostGameCarnageReportExtendedData `json:"extended,omitempty"`

	// Player Identity details of the player
	Player *DestinyHistoricalStatsDestinyPlayer `json:"player,omitempty"`

	// Score Score of the player if available
	Score *HistoricalStatsValue `json:"score,omitempty"`

	// Standing Standing of the player
	Standing *int32 `json:"standing,omitempty"`

	// Values Collection of stats for the player in this activity.
	Values *map[string]HistoricalStatsValue `json:"values,omitempty"`
}

// PostGameCarnageReportExtendedData defines model for Destiny.HistoricalStats.DestinyPostGameCarnageReportExtendedData.
type PostGameCarnageReportExtendedData struct {
	// Values Collection of stats for the player in this activity.
	Values *map[string]HistoricalStatsValue `json:"values,omitempty"`

	// Weapons List of weapons and their perspective values.
	Weapons *[]HistoricalWeaponStats `json:"weapons,omitempty"`
}

// TeamEntry defines model for Destiny.HistoricalStats.DestinyPostGameCarnageReportTeamEntry.
type TeamEntry struct {
	// Score Score earned by the team
	Score *HistoricalStatsValue `json:"score,omitempty"`

	// Standing Team's standing relative to other teams.
	Standing *HistoricalStatsValue `json:"standing,omitempty"`

	// TeamID Integer ID for the team.
	TeamID *int32 `json:"teamId,omitempty"`

	// TeamName Alpha or Bravo
	TeamName *string `json:"teamName,omitempty"`
}

// DestinyMilestonesDestinyMilestone Represents a runtime instance of a user's milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said "things to do." Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API.
type DestinyMilestonesDestinyMilestone struct {
	// Activities The currently active Activities in this milestone, when the Milestone is driven by Challenges.
	// Not all Milestones have Challenges, but when they do this will indicate the Activities and Challenges under those Activities related to this Milestone.
	Activities *[]DestinyMilestonesDestinyMilestoneChallengeActivity `json:"activities,omitempty"`

	// AvailableQuests Indicates what quests are available for this Milestone. Usually this will be only a single Quest, but some quests have multiple available that you can choose from at any given time. All possible quests for a milestone can be found in the DestinyMilestoneDefinition, but they must be combined with this Live data to determine which one(s) are actually active right now. It is possible for Milestones to not have any quests.
	AvailableQuests *[]DestinyMilestonesDestinyMilestoneQuest `json:"availableQuests,omitempty"`

	// EndDate If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.
	EndDate *time.Time `json:"endDate"`

	// MilestoneHash The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.
	MilestoneHash *uint32 `json:"milestoneHash,omitempty"`

	// Order Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.
	Order *int32 `json:"order,omitempty"`

	// Rewards If the entity to which this component is attached has known active Rewards for the player, this will detail information about those rewards, keyed by the RewardEntry Hash. (See DestinyMilestoneDefinition for more information about Reward Entries) Note that these rewards are not for the Quests related to the Milestone. Think of these as "overview/checklist" rewards that may be provided for Milestones that may provide rewards for performing a variety of tasks that aren't under a specific Quest.
	Rewards *[]DestinyMilestonesDestinyMilestoneRewardCategory `json:"rewards,omitempty"`

	// StartDate If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.
	StartDate *time.Time `json:"startDate"`

	// Values Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn't fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.
	Values *map[string]float32 `json:"values,omitempty"`

	// VendorHashes A milestone may have one or more active vendors that are "related" to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I'm typing it. [I told you I'd regret this] You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.
	// Before we even use it, it's already deprecated! How much of a bummer is that? We need more data.
	VendorHashes *[]uint32 `json:"vendorHashes,omitempty"`

	// Vendors Replaces vendorHashes, which I knew was going to be trouble the day it walked in the door. This will return not only what Vendors are active and relevant to the activity (in an implied order that you can choose to ignore), but also other data - for example, if the Vendor is featuring a specific item relevant to this event that you should show with them.
	Vendors *[]DestinyMilestonesDestinyMilestoneVendor `json:"vendors,omitempty"`
}

// DestinyMilestonesDestinyMilestoneActivity Sometimes, we know the specific activity that the Milestone wants you to play. This entity provides additional information about that Activity and all of its variants. (sometimes there's only one variant, but I think you get the point)
type DestinyMilestonesDestinyMilestoneActivity struct {
	// ActivityHash The hash of an arbitrarily chosen variant of this activity. We'll go ahead and call that the "canonical" activity, because if you're using this value you should only use it for properties that are common across the variants: things like the name of the activity, it's location, etc... Use this hash to look up the DestinyActivityDefinition of this activity for rendering data.
	ActivityHash *uint32 `json:"activityHash,omitempty"`

	// ActivityModeHash The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.
	ActivityModeHash *uint32 `json:"activityModeHash"`

	// ActivityModeType The enumeration equivalent of the most specific Activity Mode under which this activity is played.
	ActivityModeType *DestinyMilestonesDestinyMilestoneActivityActivityModeType `json:"activityModeType"`

	// ModifierHashes If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data. Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
	ModifierHashes *[]uint32 `json:"modifierHashes,omitempty"`

	// Variants If you want more than just name/location/etc... you're going to have to dig into and show the variants of the conceptual activity. These will differ in seemingly arbitrary ways, like difficulty level and modifiers applied. Show it in whatever way tickles your fancy.
	Variants *[]DestinyMilestonesDestinyMilestoneActivityVariant `json:"variants,omitempty"`
}

// DestinyMilestonesDestinyMilestoneActivityActivityModeType The enumeration equivalent of the most specific Activity Mode under which this activity is played.
type DestinyMilestonesDestinyMilestoneActivityActivityModeType int32

// DestinyMilestonesDestinyMilestoneActivityCompletionStatus Represents this player's personal completion status for the Activity under a Milestone, if the activity has trackable completion and progress information. (most activities won't, or the concept won't apply. For instance, it makes sense to talk about a tier of a raid as being Completed or having progress, but it doesn't make sense to talk about a Crucible Playlist in those terms.
type DestinyMilestonesDestinyMilestoneActivityCompletionStatus struct {
	// Completed If the activity has been "completed", that information will be returned here.
	Completed *bool `json:"completed,omitempty"`

	// Phases If the Activity has discrete "phases" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.
	Phases *[]DestinyMilestonesDestinyMilestoneActivityPhase `json:"phases,omitempty"`
}

// DestinyMilestonesDestinyMilestoneActivityPhase Represents whatever information we can return about an explicit phase in an activity. In the future, I hope we'll have more than just "guh, you done gone and did something," but for the forseeable future that's all we've got. I'm making it more than just a list of booleans out of that overly-optimistic hope.
type DestinyMilestonesDestinyMilestoneActivityPhase struct {
	// Complete Indicates if the phase has been completed.
	Complete *bool `json:"complete,omitempty"`

	// PhaseHash In DestinyActivityDefinition, if the activity has phases, there will be a set of phases defined in the "insertionPoints" property. This is the hash that maps to that phase.
	PhaseHash *uint32 `json:"phaseHash,omitempty"`
}

// DestinyMilestonesDestinyMilestoneActivityVariant Represents custom data that we know about an individual variant of an activity.
type DestinyMilestonesDestinyMilestoneActivityVariant struct {
	// ActivityHash The hash for the specific variant of the activity related to this milestone. You can pull more detailed static info from the DestinyActivityDefinition, such as difficulty level.
	ActivityHash *uint32 `json:"activityHash,omitempty"`

	// ActivityModeHash The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.
	ActivityModeHash *uint32 `json:"activityModeHash"`

	// ActivityModeType The enumeration equivalent of the most specific Activity Mode under which this activity is played.
	ActivityModeType *DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType `json:"activityModeType"`

	// CompletionStatus An OPTIONAL component: if it makes sense to talk about this activity variant in terms of whether or not it has been completed or what progress you have made in it, this will be returned. Otherwise, this will be NULL.
	CompletionStatus *DestinyMilestonesDestinyMilestoneActivityCompletionStatus `json:"completionStatus,omitempty"`
}

// DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType The enumeration equivalent of the most specific Activity Mode under which this activity is played.
type DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType int32

// DestinyMilestonesDestinyMilestoneChallengeActivity defines model for Destiny.Milestones.DestinyMilestoneChallengeActivity.
type DestinyMilestonesDestinyMilestoneChallengeActivity struct {
	ActivityHash *uint32 `json:"activityHash,omitempty"`

	// BooleanActivityOptions The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).
	// As a concrete example of this data, the hashes you get for Raids will correspond to the currently active "Challenge Mode".
	// We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the "option" that is enabled/disabled) and the value (whether it's enabled or disabled presently)
	// On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.
	BooleanActivityOptions *map[string]bool                           `json:"booleanActivityOptions,omitempty"`
	Challenges             *[]DestinyChallengesDestinyChallengeStatus `json:"challenges,omitempty"`

	// LoadoutRequirementIndex If returned, this is the index into the DestinyActivityDefinition's "loadouts" property, indicating the currently active loadout requirements.
	LoadoutRequirementIndex *int32 `json:"loadoutRequirementIndex"`

	// ModifierHashes If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.
	// Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
	ModifierHashes *[]uint32 `json:"modifierHashes,omitempty"`

	// Phases If the Activity has discrete "phases" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.
	Phases *[]DestinyMilestonesDestinyMilestoneActivityPhase `json:"phases,omitempty"`
}

// DestinyMilestonesDestinyMilestoneQuest If a Milestone has one or more Quests, this will contain the live information for the character's status with one of those quests.
type DestinyMilestonesDestinyMilestoneQuest struct {
	// Activity *IF* the Milestone has an active Activity that can give you greater details about what you need to do, it will be returned here. Remember to associate this with the DestinyMilestoneDefinition's activities to get details about the activity, including what specific quest it is related to if you have multiple quests to choose from.
	Activity *DestinyMilestonesDestinyMilestoneActivity `json:"activity,omitempty"`

	// Challenges The activities referred to by this quest can have many associated challenges. They are all contained here, with activityHashes so that you can associate them with the specific activity variants in which they can be found. In retrospect, I probably should have put these under the specific Activity Variants, but it's too late to change it now. Theoretically, a quest without Activities can still have Challenges, which is why this is on a higher level than activity/variants, but it probably should have been in both places. That may come as a later revision.
	Challenges *[]DestinyChallengesDestinyChallengeStatus `json:"challenges,omitempty"`

	// QuestItemHash Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item's DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.
	QuestItemHash *uint32 `json:"questItemHash,omitempty"`

	// Status The current status of the quest for the character making the request.
	Status *DestinyQuestsDestinyQuestStatus `json:"status,omitempty"`
}

// DestinyMilestonesDestinyMilestoneRewardCategory Represents a category of "summary" rewards that can be earned for the Milestone regardless of specific quest rewards that can be earned.
type DestinyMilestonesDestinyMilestoneRewardCategory struct {
	// Entries The individual reward entries for this category, and their status.
	Entries *[]DestinyMilestonesDestinyMilestoneRewardEntry `json:"entries,omitempty"`

	// RewardCategoryHash Look up the relevant DestinyMilestoneDefinition, and then use rewardCategoryHash to look up the category info in DestinyMilestoneDefinition.rewards.
	RewardCategoryHash *uint32 `json:"rewardCategoryHash,omitempty"`
}

// DestinyMilestonesDestinyMilestoneRewardEntry The character-specific data for a milestone's reward entry. See DestinyMilestoneDefinition for more information about Reward Entries.
type DestinyMilestonesDestinyMilestoneRewardEntry struct {
	// Earned If TRUE, the player has earned this reward.
	Earned *bool `json:"earned,omitempty"`

	// Redeemed If TRUE, the player has redeemed/picked up/obtained this reward. Feel free to alias this to "gotTheShinyBauble" in your own codebase.
	Redeemed *bool `json:"redeemed,omitempty"`

	// RewardEntryHash The identifier for the reward entry in question. It is important to look up the related DestinyMilestoneRewardEntryDefinition to get the static details about the reward, which you can do by looking up the milestone's DestinyMilestoneDefinition and examining the DestinyMilestoneDefinition.rewards[rewardCategoryHash].rewardEntries[rewardEntryHash] data.
	RewardEntryHash *uint32 `json:"rewardEntryHash,omitempty"`
}

// DestinyMilestonesDestinyMilestoneVendor If a Milestone has one or more Vendors that are relevant to it, this will contain information about that vendor that you can choose to show.
type DestinyMilestonesDestinyMilestoneVendor struct {
	// PreviewItemHash If this vendor is featuring a specific item for this event, this will be the hash identifier of that item. I'm taking bets now on how long we go before this needs to be a list or some other, more complex representation instead and I deprecate this too. I'm going to go with 5 months. Calling it now, 2017-09-14 at 9:46pm PST.
	PreviewItemHash *uint32 `json:"previewItemHash"`

	// VendorHash The hash identifier of the Vendor related to this Milestone. You can show useful things from this, such as thier Faction icon or whatever you might care about.
	VendorHash *uint32 `json:"vendorHash,omitempty"`
}

// DestinyMiscDestinyColor Represents a color whose RGBA values are all represented as values between 0 and 255.
type DestinyMiscDestinyColor struct {
	Alpha *int `json:"alpha,omitempty"`
	Blue  *int `json:"blue,omitempty"`
	Green *int `json:"green,omitempty"`
	Red   *int `json:"red,omitempty"`
}

// DestinyPerksDestinyPerkReference The list of perks to display in an item tooltip - and whether or not they have been activated.
// Perks apply a variety of effects to a character, and are generally either intrinsic to the item or provided in activated talent nodes or sockets.
type DestinyPerksDestinyPerkReference struct {
	// IconPath The icon for the perk.
	IconPath *string `json:"iconPath,omitempty"`

	// IsActive Whether this perk is currently active. (We may return perks that you have not actually activated yet: these represent perks that you should show in the item's tooltip, but that the user has not yet activated.)
	IsActive *bool `json:"isActive,omitempty"`

	// PerkHash The hash identifier for the perk, which can be used to look up DestinySandboxPerkDefinition if it exists. Be warned, perks frequently do not have user-viewable information. You should examine whether you actually found a name/description in the perk's definition before you show it to the user.
	PerkHash *uint32 `json:"perkHash,omitempty"`

	// Visible Some perks provide benefits, but aren't visible in the UI. This value will let you know if this is perk should be shown in your UI.
	Visible *bool `json:"visible,omitempty"`
}

// DestinyProgressionDestinyFactionProgression Mostly for historical purposes, we segregate Faction progressions from other progressions. This is just a DestinyProgression with a shortcut for finding the DestinyFactionDefinition of the faction related to the progression.
type DestinyProgressionDestinyFactionProgression struct {
	// CurrentProgress This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)
	CurrentProgress *int32 `json:"currentProgress,omitempty"`

	// CurrentResetCount The number of resets of this progression you've executed this season, if applicable to this progression.
	CurrentResetCount *int32 `json:"currentResetCount"`

	// DailyLimit If this progression has a daily limit, this is that limit.
	DailyLimit *int32 `json:"dailyLimit,omitempty"`

	// DailyProgress The amount of progress earned today for this progression.
	DailyProgress *int32 `json:"dailyProgress,omitempty"`

	// FactionHash The hash identifier of the Faction related to this progression. Use it to look up the DestinyFactionDefinition for more rendering info.
	FactionHash *uint32 `json:"factionHash,omitempty"`

	// FactionVendorIndex The index of the Faction vendor that is currently available. Will be set to -1 if no vendors are available.
	FactionVendorIndex *int32 `json:"factionVendorIndex,omitempty"`

	// Level This is the level of the progression (for instance, the Character Level).
	Level *int32 `json:"level,omitempty"`

	// LevelCap This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)
	LevelCap *int32 `json:"levelCap,omitempty"`

	// NextLevelAt The total amount of progression (i.e. "Experience") needed in order to reach the next level.
	NextLevelAt *int32 `json:"nextLevelAt,omitempty"`

	// ProgressToNextLevel The amount of progression (i.e. "Experience") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.
	ProgressToNextLevel *int32 `json:"progressToNextLevel,omitempty"`

	// ProgressionHash The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.
	ProgressionHash *uint32 `json:"progressionHash,omitempty"`

	// RewardItemSocketOverrideStates Information about items stats and states that have socket overrides, if there is any data for it.
	RewardItemSocketOverrideStates *map[string]DestinyDestinyProgressionRewardItemSocketOverrideState `json:"rewardItemSocketOverrideStates,omitempty"`

	// RewardItemStates Information about historical rewards for this progression, if there is any data for it.
	RewardItemStates *[]int32 `json:"rewardItemStates,omitempty"`

	// SeasonResets Information about historical resets of this progression, if there is any data for it.
	SeasonResets *[]DestinyDestinyProgressionResetEntry `json:"seasonResets,omitempty"`

	// StepIndex Progressions define their levels in "steps". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the "steps" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)
	StepIndex *int32 `json:"stepIndex,omitempty"`

	// WeeklyLimit If this progression has a weekly limit, this is that limit.
	WeeklyLimit *int32 `json:"weeklyLimit,omitempty"`

	// WeeklyProgress The amount of progress earned toward this progression in the current week.
	WeeklyProgress *int32 `json:"weeklyProgress,omitempty"`
}

// DestinyQuestsDestinyObjectiveProgress Returns data about a character's status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes.
type DestinyQuestsDestinyObjectiveProgress struct {
	// ActivityHash If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved.
	ActivityHash *uint32 `json:"activityHash"`

	// Complete Whether or not the Objective is completed.
	Complete *bool `json:"complete,omitempty"`

	// CompletionValue As of Forsaken, objectives' completion value is determined dynamically at runtime.
	// This value represents the threshold of progress you need to surpass in order for this objective to be considered "complete".
	// If you were using objective data, switch from using the DestinyObjectiveDefinition's "completionValue" to this value.
	CompletionValue *int32 `json:"completionValue,omitempty"`

	// DestinationHash If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved.
	DestinationHash *uint32 `json:"destinationHash"`

	// ObjectiveHash The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data.
	ObjectiveHash *uint32 `json:"objectiveHash,omitempty"`

	// Progress If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle before rendering progress.
	Progress *int32 `json:"progress"`

	// Visible If this is true, the objective is visible in-game. Otherwise, it's not yet visible to the player. Up to you if you want to honor this property.
	Visible *bool `json:"visible,omitempty"`
}

// DestinyQuestsDestinyQuestStatus Data regarding the progress of a Quest for a specific character. Quests are composed of multiple steps, each with potentially multiple objectives: this QuestStatus will return Objective data for the *currently active* step in this quest.
type DestinyQuestsDestinyQuestStatus struct {
	// Completed Whether or not the whole quest has been completed, regardless of whether or not you have redeemed the rewards for the quest.
	Completed *bool `json:"completed,omitempty"`

	// ItemInstanceId The current Quest Step will be an instanced item in the player's inventory. If you care about that, this is the instance ID of that item.
	ItemInstanceId *int64 `json:"itemInstanceId,omitempty"`

	// QuestHash The hash identifier for the Quest Item. (Note: Quests are defined as Items, and thus you would use this to look up the quest's DestinyInventoryItemDefinition). For information on all steps in the quest, you can then examine its DestinyInventoryItemDefinition.setData property for Quest Steps (which are *also* items). You can use the Item Definition to display human readable data about the overall quest.
	QuestHash *uint32 `json:"questHash,omitempty"`

	// Redeemed Whether or not you have redeemed rewards for this quest.
	Redeemed *bool `json:"redeemed,omitempty"`

	// Started Whether or not you have started this quest.
	Started *bool `json:"started,omitempty"`

	// StepHash The hash identifier of the current Quest Step, which is also a DestinyInventoryItemDefinition. You can use this to get human readable data about the current step and what to do in that step.
	StepHash *uint32 `json:"stepHash,omitempty"`

	// StepObjectives A step can have multiple objectives. This will give you the progress for each objective in the current step, in the order in which they are rendered in-game.
	StepObjectives *[]DestinyQuestsDestinyObjectiveProgress `json:"stepObjectives,omitempty"`

	// Tracked Whether or not the quest is tracked
	Tracked *bool `json:"tracked,omitempty"`

	// VendorHash If the quest has a related Vendor that you should talk to in order to initiate the quest/earn rewards/continue the quest, this will be the hash identifier of that Vendor. Look it up its DestinyVendorDefinition.
	VendorHash *uint32 `json:"vendorHash"`
}

// DestinyItem The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
type DestinyItem struct {
	// CharacterId If the item is on a character, this will return the ID of the character that is holding the item.
	CharacterId *string `json:"characterId"`

	// Instance Basic instance data for the item.
	// COMPONENT TYPE: ItemInstances
	Instance *SingleComponentResponseOfDestinyItemInstanceComponent `json:"instance,omitempty"`

	// Item Common data for the item relevant to its non-instanced properties.
	// COMPONENT TYPE: ItemCommonData
	Item *SingleComponentResponseOfDestinyItemComponent `json:"item,omitempty"`

	// Objectives Information specifically about the item's objectives.
	// COMPONENT TYPE: ItemObjectives
	Objectives *SingleComponentResponseOfDestinyItemObjectivesComponent `json:"objectives,omitempty"`

	// Perks Information specifically about the perks currently active on the item.
	// COMPONENT TYPE: ItemPerks
	Perks *SingleComponentResponseOfDestinyItemPerksComponent `json:"perks,omitempty"`

	// PlugObjectives Information about objectives on Plugs for a given item. See the component's documentation for more info.
	// COMPONENT TYPE: ItemPlugObjectives
	PlugObjectives *SingleComponentResponseOfDestinyItemPlugObjectivesComponent `json:"plugObjectives,omitempty"`

	// RenderData Information about how to render the item in 3D.
	// COMPONENT TYPE: ItemRenderData
	RenderData *SingleComponentResponseOfDestinyItemRenderComponent `json:"renderData,omitempty"`

	// ReusablePlugs Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.
	//  These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.
	//  COMPONENT TYPE: ItemReusablePlugs
	ReusablePlugs *SingleComponentResponseOfDestinyItemReusablePlugsComponent `json:"reusablePlugs,omitempty"`

	// Sockets Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.
	// COMPONENT TYPE: ItemSockets
	Sockets *SingleComponentResponseOfDestinyItemSocketsComponent `json:"sockets,omitempty"`

	// Stats Information about the computed stats of the item: power, defense, etc...
	// COMPONENT TYPE: ItemStats
	Stats *SingleComponentResponseOfDestinyItemStatsComponent `json:"stats,omitempty"`

	// TalentGrid Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character's "Builds".
	// COMPONENT TYPE: ItemTalentGrids
	TalentGrid *SingleComponentResponseOfDestinyItemTalentGridComponent `json:"talentGrid,omitempty"`
}

// DestinyResponsesDestinyProfileResponse The response for GetDestinyProfile, with components for character and item-level data.
type DestinyResponsesDestinyProfileResponse struct {
	// CharacterActivities Character activity data - the activities available to this character and its status, keyed by the Character's Id.
	// COMPONENT TYPE: CharacterActivities
	CharacterActivities *DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent `json:"characterActivities,omitempty"`

	// CharacterCollectibles COMPONENT TYPE: Collectibles
	CharacterCollectibles *DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent `json:"characterCollectibles,omitempty"`

	// CharacterCraftables COMPONENT TYPE: Craftables
	CharacterCraftables *DictionaryComponentResponseOfint64AndDestinyCraftablesComponent `json:"characterCraftables,omitempty"`

	// CharacterCurrencyLookups A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
	// COMPONENT TYPE: CurrencyLookups
	CharacterCurrencyLookups *DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent `json:"characterCurrencyLookups,omitempty"`

	// CharacterEquipment The character's equipped items, keyed by the Character's Id.
	// COMPONENT TYPE: CharacterEquipment
	CharacterEquipment *DictionaryComponentResponseOfint64AndDestinyInventoryComponent `json:"characterEquipment,omitempty"`

	// CharacterInventories The character-level non-equipped inventory items, keyed by the Character's Id.
	// COMPONENT TYPE: CharacterInventories
	CharacterInventories *DictionaryComponentResponseOfint64AndDestinyInventoryComponent `json:"characterInventories,omitempty"`

	// CharacterKiosks Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.
	// This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.
	// COMPONENT TYPE: Kiosks
	CharacterKiosks *DictionaryComponentResponseOfint64AndDestinyKiosksComponent `json:"characterKiosks,omitempty"`

	// CharacterLoadouts The character loadouts, keyed by the Character's Id.
	// COMPONENT TYPE: CharacterLoadouts
	CharacterLoadouts *DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent `json:"characterLoadouts,omitempty"`

	// CharacterPlugSets When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states, per character, that are character-scoped.
	// This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
	// COMPONENT TYPE: ItemSockets
	CharacterPlugSets *DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent `json:"characterPlugSets,omitempty"`

	// CharacterPresentationNodes COMPONENT TYPE: PresentationNodes
	CharacterPresentationNodes *DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent `json:"characterPresentationNodes,omitempty"`

	// CharacterProgressions Character-level progression data, keyed by the Character's Id.
	// COMPONENT TYPE: CharacterProgressions
	CharacterProgressions *DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent `json:"characterProgressions,omitempty"`

	// CharacterRecords COMPONENT TYPE: Records
	CharacterRecords *DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent `json:"characterRecords,omitempty"`

	// CharacterRenderData Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.
	// COMPONENT TYPE: CharacterRenderData
	CharacterRenderData *DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent `json:"characterRenderData,omitempty"`

	// CharacterStringVariables COMPONENT TYPE: StringVariables
	CharacterStringVariables *DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent `json:"characterStringVariables,omitempty"`

	// CharacterUninstancedItemComponents Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that's happening under the surface?
	// Let's talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.
	// At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.
	// Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus "itemComponents" was all that you needed: it was keyed by item's instance IDs and provided the stateful information you needed inside.
	// Unfortunately, we don't live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it's in Account-level inventory - and the values related to that item's state in relation to the given character.
	// To give a concrete example, look at a Moments of Triumph bounty. They exist in a character's inventory, and show/care about a character's progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.
	// I'm not crying, you're crying Okay we're both crying but it's going to be okay I promise Actually I shouldn't promise that, I don't know if it's going to be okay
	CharacterUninstancedItemComponents *map[string]DestinyBaseItemComponentSetOfuint32 `json:"characterUninstancedItemComponents,omitempty"`

	// Characters Basic information about each character, keyed by the CharacterId.
	// COMPONENT TYPE: Characters
	Characters *DictionaryComponentResponseOfint64AndDestinyCharacterComponent `json:"characters,omitempty"`

	// ItemComponents Information about instanced items across all returned characters, keyed by the item's instance ID.
	// COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
	ItemComponents *DestinyItemComponentSetOfint64 `json:"itemComponents,omitempty"`

	// Metrics COMPONENT TYPE: Metrics
	Metrics *SingleComponentResponseOfDestinyMetricsComponent `json:"metrics,omitempty"`

	// PlatformSilver Silver quantities for any platform on which this Profile plays destiny.
	//  COMPONENT TYPE: PlatformSilver
	PlatformSilver *SingleComponentResponseOfDestinyPlatformSilverComponent `json:"platformSilver,omitempty"`

	// Profile The basic information about the Destiny Profile (formerly "Account").
	// COMPONENT TYPE: Profiles
	Profile *SingleComponentResponseOfDestinyProfileComponent `json:"profile,omitempty"`

	// ProfileCollectibles COMPONENT TYPE: Collectibles
	ProfileCollectibles *SingleComponentResponseOfDestinyProfileCollectiblesComponent `json:"profileCollectibles,omitempty"`

	// ProfileCommendations COMPONENT TYPE: SocialCommendations
	ProfileCommendations *SingleComponentResponseOfDestinySocialCommendationsComponent `json:"profileCommendations,omitempty"`

	// ProfileCurrencies The profile-level currencies owned by the Destiny Profile.
	// COMPONENT TYPE: ProfileCurrencies
	ProfileCurrencies *SingleComponentResponseOfDestinyInventoryComponent `json:"profileCurrencies,omitempty"`

	// ProfileInventory The profile-level inventory of the Destiny Profile.
	// COMPONENT TYPE: ProfileInventories
	ProfileInventory *SingleComponentResponseOfDestinyInventoryComponent `json:"profileInventory,omitempty"`

	// ProfileKiosks Items available from Kiosks that are available Profile-wide (i.e. across all characters)
	// This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.
	// COMPONENT TYPE: Kiosks
	ProfileKiosks *SingleComponentResponseOfDestinyKiosksComponent `json:"profileKiosks,omitempty"`

	// ProfilePlugSets When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are profile-scoped.
	// This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
	// COMPONENT TYPE: ItemSockets
	ProfilePlugSets *SingleComponentResponseOfDestinyPlugSetsComponent `json:"profilePlugSets,omitempty"`

	// ProfilePresentationNodes COMPONENT TYPE: PresentationNodes
	ProfilePresentationNodes *SingleComponentResponseOfDestinyPresentationNodesComponent `json:"profilePresentationNodes,omitempty"`

	// ProfileProgression When we have progression information - such as Checklists - that may apply profile-wide, it will be returned here rather than in the per-character progression data.
	// COMPONENT TYPE: ProfileProgression
	ProfileProgression *SingleComponentResponseOfDestinyProfileProgressionComponent `json:"profileProgression,omitempty"`

	// ProfileRecords COMPONENT TYPE: Records
	ProfileRecords *SingleComponentResponseOfDestinyProfileRecordsComponent `json:"profileRecords,omitempty"`

	// ProfileStringVariables COMPONENT TYPE: StringVariables
	ProfileStringVariables *SingleComponentResponseOfDestinyStringVariablesComponent `json:"profileStringVariables,omitempty"`

	// ProfileTransitoryData COMPONENT TYPE: Transitory
	ProfileTransitoryData *SingleComponentResponseOfDestinyProfileTransitoryComponent `json:"profileTransitoryData,omitempty"`

	// ResponseMintedTimestamp Records the timestamp of when most components were last generated from the world server source. Unless the component type is specified in the documentation for secondaryComponentsMintedTimestamp, this value is sufficient to do data freshness.
	ResponseMintedTimestamp *time.Time `json:"responseMintedTimestamp,omitempty"`

	// SecondaryComponentsMintedTimestamp Some secondary components are not tracked in the primary response timestamp and have their timestamp tracked here. If your component is any of the following, this field is where you will find your timestamp value:
	//  PresentationNodes, Records, Collectibles, Metrics, StringVariables, Craftables, Transitory
	//  All other component types may use the primary timestamp property.
	SecondaryComponentsMintedTimestamp *time.Time `json:"secondaryComponentsMintedTimestamp,omitempty"`

	// VendorReceipts Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...
	// COMPONENT TYPE: VendorReceipts
	VendorReceipts *SingleComponentResponseOfDestinyVendorReceiptsComponent `json:"vendorReceipts,omitempty"`
}

// DestinySocketsDestinyItemPlug defines model for Destiny.Sockets.DestinyItemPlug.
type DestinySocketsDestinyItemPlug struct {
	// CanInsert If true, this plug has met all of its insertion requirements. Big if true.
	CanInsert *bool `json:"canInsert,omitempty"`

	// EnableFailIndexes If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
	// This list will be empty if the plug is enabled.
	EnableFailIndexes *[]int32 `json:"enableFailIndexes,omitempty"`

	// Enabled If true, this plug will provide its benefits while inserted.
	Enabled *bool `json:"enabled,omitempty"`

	// InsertFailIndexes If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
	// This list will be empty if the plug can be inserted.
	InsertFailIndexes *[]int32 `json:"insertFailIndexes,omitempty"`

	// MaxStackSize If available, this is the maximum stack size to display for the socket plug item.
	MaxStackSize *int32 `json:"maxStackSize"`

	// PlugItemHash The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
	PlugItemHash *uint32 `json:"plugItemHash,omitempty"`

	// PlugObjectives Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the "gating" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.
	PlugObjectives *[]DestinyQuestsDestinyObjectiveProgress `json:"plugObjectives,omitempty"`

	// StackSize If available, this is the stack size to display for the socket plug item.
	StackSize *int32 `json:"stackSize"`
}

// DestinySocketsDestinyItemPlugBase defines model for Destiny.Sockets.DestinyItemPlugBase.
type DestinySocketsDestinyItemPlugBase struct {
	// CanInsert If true, this plug has met all of its insertion requirements. Big if true.
	CanInsert *bool `json:"canInsert,omitempty"`

	// EnableFailIndexes If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
	// This list will be empty if the plug is enabled.
	EnableFailIndexes *[]int32 `json:"enableFailIndexes,omitempty"`

	// Enabled If true, this plug will provide its benefits while inserted.
	Enabled *bool `json:"enabled,omitempty"`

	// InsertFailIndexes If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
	// This list will be empty if the plug can be inserted.
	InsertFailIndexes *[]int32 `json:"insertFailIndexes,omitempty"`

	// MaxStackSize If available, this is the maximum stack size to display for the socket plug item.
	MaxStackSize *int32 `json:"maxStackSize"`

	// PlugItemHash The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
	PlugItemHash *uint32 `json:"plugItemHash,omitempty"`

	// StackSize If available, this is the stack size to display for the socket plug item.
	StackSize *int32 `json:"stackSize"`
}

// DestinyVendorsDestinyVendorReceipt If a character purchased an item that is refundable, a Vendor Receipt will be created on the user's Destiny Profile. These expire after a configurable period of time, but until then can be used to get refunds on items. BNet does not provide the ability to refund a purchase *yet*, but you know.
type DestinyVendorsDestinyVendorReceipt struct {
	// CurrencyPaid The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.
	CurrencyPaid *[]DestinyDestinyItemQuantity `json:"currencyPaid,omitempty"`

	// ExpiresOn The date at which this receipt is rendered invalid.
	ExpiresOn *time.Time `json:"expiresOn,omitempty"`

	// ItemReceived The item that was received, and its quantity.
	ItemReceived *DestinyDestinyItemQuantity `json:"itemReceived,omitempty"`

	// LicenseUnlockHash The unlock flag used to determine whether you still have the purchased item.
	LicenseUnlockHash *uint32 `json:"licenseUnlockHash,omitempty"`

	// PurchasedByCharacterId The ID of the character who made the purchase.
	PurchasedByCharacterId *int64 `json:"purchasedByCharacterId,omitempty"`

	// RefundPolicy Whether you can get a refund, and what happens in order for the refund to be received. See the DestinyVendorItemRefundPolicy enum for details.
	RefundPolicy *int32 `json:"refundPolicy,omitempty"`

	// SequenceNumber The identifier of this receipt.
	SequenceNumber *int32 `json:"sequenceNumber,omitempty"`

	// TimeToExpiration The seconds since epoch at which this receipt is rendered invalid.
	TimeToExpiration *int64 `json:"timeToExpiration,omitempty"`
}

// DestinyBaseItemComponentSetOfuint32 defines model for DestinyBaseItemComponentSetOfuint32.
type DestinyBaseItemComponentSetOfuint32 struct {
	Objectives *DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent `json:"objectives,omitempty"`
	Perks      *DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent      `json:"perks,omitempty"`
}

// DestinyItemComponentSetOfint64 defines model for DestinyItemComponentSetOfint64.
type DestinyItemComponentSetOfint64 struct {
	Instances      *DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent       `json:"instances,omitempty"`
	Objectives     *DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent     `json:"objectives,omitempty"`
	Perks          *DictionaryComponentResponseOfint64AndDestinyItemPerksComponent          `json:"perks,omitempty"`
	PlugObjectives *DictionaryComponentResponseOfint64AndDestinyItemPlugObjectivesComponent `json:"plugObjectives,omitempty"`
	PlugStates     *DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent          `json:"plugStates,omitempty"`
	RenderData     *DictionaryComponentResponseOfint64AndDestinyItemRenderComponent         `json:"renderData,omitempty"`
	ReusablePlugs  *DictionaryComponentResponseOfint64AndDestinyItemReusablePlugsComponent  `json:"reusablePlugs,omitempty"`
	Sockets        *DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent        `json:"sockets,omitempty"`
	Stats          *DictionaryComponentResponseOfint64AndDestinyItemStatsComponent          `json:"stats,omitempty"`
	TalentGrids    *DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent     `json:"talentGrids,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent defines model for DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent.
type DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent struct {
	Data *map[string]DestinyEntitiesCharactersDestinyCharacterActivitiesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyCharacterComponent defines model for DictionaryComponentResponseOfint64AndDestinyCharacterComponent.
type DictionaryComponentResponseOfint64AndDestinyCharacterComponent struct {
	Data *map[string]CharacterComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent defines model for DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent.
type DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent struct {
	Data *map[string]DestinyEntitiesCharactersDestinyCharacterProgressionComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent defines model for DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent.
type DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent struct {
	Data *map[string]DestinyComponentsRecordsDestinyCharacterRecordsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent defines model for DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent.
type DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent struct {
	Data *map[string]DestinyEntitiesCharactersDestinyCharacterRenderComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent defines model for DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent.
type DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent struct {
	Data *map[string]DestinyComponentsCollectiblesDestinyCollectiblesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyCraftablesComponent defines model for DictionaryComponentResponseOfint64AndDestinyCraftablesComponent.
type DictionaryComponentResponseOfint64AndDestinyCraftablesComponent struct {
	Data *map[string]DestinyComponentsCraftablesDestinyCraftablesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent defines model for DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent.
type DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent struct {
	Data *map[string]DestinyComponentsInventoryDestinyCurrenciesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyInventoryComponent defines model for DictionaryComponentResponseOfint64AndDestinyInventoryComponent.
type DictionaryComponentResponseOfint64AndDestinyInventoryComponent struct {
	Data *map[string]DestinyEntitiesInventoryDestinyInventoryComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent defines model for DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent.
type DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent struct {
	Data *map[string]ItemInstanceComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent defines model for DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent.
type DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent struct {
	Data *map[string]DestinyEntitiesItemsDestinyItemObjectivesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyItemPerksComponent defines model for DictionaryComponentResponseOfint64AndDestinyItemPerksComponent.
type DictionaryComponentResponseOfint64AndDestinyItemPerksComponent struct {
	Data *map[string]DestinyEntitiesItemsDestinyItemPerksComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyItemPlugObjectivesComponent defines model for DictionaryComponentResponseOfint64AndDestinyItemPlugObjectivesComponent.
type DictionaryComponentResponseOfint64AndDestinyItemPlugObjectivesComponent struct {
	Data *map[string]DestinyComponentsItemsDestinyItemPlugObjectivesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyItemRenderComponent defines model for DictionaryComponentResponseOfint64AndDestinyItemRenderComponent.
type DictionaryComponentResponseOfint64AndDestinyItemRenderComponent struct {
	Data *map[string]DestinyEntitiesItemsDestinyItemRenderComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyItemReusablePlugsComponent defines model for DictionaryComponentResponseOfint64AndDestinyItemReusablePlugsComponent.
type DictionaryComponentResponseOfint64AndDestinyItemReusablePlugsComponent struct {
	Data *map[string]DestinyComponentsItemsDestinyItemReusablePlugsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent defines model for DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent.
type DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent struct {
	Data *map[string]DestinyEntitiesItemsDestinyItemSocketsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyItemStatsComponent defines model for DictionaryComponentResponseOfint64AndDestinyItemStatsComponent.
type DictionaryComponentResponseOfint64AndDestinyItemStatsComponent struct {
	Data *map[string]DestinyEntitiesItemsDestinyItemStatsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent defines model for DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent.
type DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent struct {
	Data *map[string]DestinyEntitiesItemsDestinyItemTalentGridComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyKiosksComponent defines model for DictionaryComponentResponseOfint64AndDestinyKiosksComponent.
type DictionaryComponentResponseOfint64AndDestinyKiosksComponent struct {
	Data *map[string]DestinyComponentsKiosksDestinyKiosksComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent defines model for DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent.
type DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent struct {
	Data *map[string]DestinyComponentsLoadoutsDestinyLoadoutsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent defines model for DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent.
type DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent struct {
	Data *map[string]DestinyComponentsPlugSetsDestinyPlugSetsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent defines model for DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent.
type DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent struct {
	Data *map[string]DestinyComponentsPresentationDestinyPresentationNodesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent defines model for DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent.
type DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent struct {
	Data *map[string]DestinyComponentsStringVariablesDestinyStringVariablesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent defines model for DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent.
type DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent struct {
	Data *map[string]DestinyEntitiesItemsDestinyItemObjectivesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent defines model for DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent.
type DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent struct {
	Data *map[string]DestinyEntitiesItemsDestinyItemPerksComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent defines model for DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent.
type DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent struct {
	Data *map[string]DestinyComponentsItemsDestinyItemPlugComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// GroupsV2GroupUserInfoCard defines model for GroupsV2.GroupUserInfoCard.
type GroupsV2GroupUserInfoCard struct {
	// LastSeenDisplayName This will be the display name the clan server last saw the user as. If the account is an active cross save override, this will be the display name to use. Otherwise, this will match the displayName property.
	LastSeenDisplayName *string `json:"LastSeenDisplayName,omitempty"`

	// LastSeenDisplayNameType The platform of the LastSeenDisplayName
	LastSeenDisplayNameType *int32 `json:"LastSeenDisplayNameType,omitempty"`

	// ApplicableMembershipTypes The list of Membership Types indicating the platforms on which this Membership can be used.
	//  Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
	ApplicableMembershipTypes *[]int32 `json:"applicableMembershipTypes,omitempty"`

	// BungieGlobalDisplayName The bungie global display name, if set.
	BungieGlobalDisplayName *string `json:"bungieGlobalDisplayName,omitempty"`

	// BungieGlobalDisplayNameCode The bungie global display name code, if set.
	BungieGlobalDisplayNameCode *int16 `json:"bungieGlobalDisplayNameCode"`

	// CrossSaveOverride If there is a cross save override in effect, this value will tell you the type that is overridding this one.
	CrossSaveOverride *int32 `json:"crossSaveOverride,omitempty"`

	// DisplayName Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
	DisplayName *string `json:"displayName,omitempty"`

	// IconPath URL the Icon if available.
	IconPath *string `json:"iconPath,omitempty"`

	// IsPublic If True, this is a public user membership.
	IsPublic *bool `json:"isPublic,omitempty"`

	// MembershipId Membership ID as they user is known in the Accounts service
	MembershipId *string `json:"membershipId,omitempty"`

	// MembershipType Type of the membership. Not necessarily the native type.
	MembershipType *int32 `json:"membershipType,omitempty"`

	// SupplementalDisplayName A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
	SupplementalDisplayName *string `json:"supplementalDisplayName,omitempty"`
}

// IgnoresIgnoreResponse defines model for Ignores.IgnoreResponse.
type IgnoresIgnoreResponse struct {
	IgnoreFlags *int32 `json:"ignoreFlags,omitempty"`
	IsIgnored   *bool  `json:"isIgnored,omitempty"`
}

// SingleComponentResponseOfDestinyInventoryComponent defines model for SingleComponentResponseOfDestinyInventoryComponent.
type SingleComponentResponseOfDestinyInventoryComponent struct {
	// Data A list of minimal information for items in an inventory: be it a character's inventory, or a Profile's inventory. (Note that the Vault is a collection of inventory buckets in the Profile's inventory)
	// Inventory Items returned here are in a flat list, but importantly they have a bucketHash property that indicates the specific inventory bucket that is holding them. These buckets constitute things like the separate sections of the Vault, the user's inventory slots, etc. See DestinyInventoryBucketDefinition for more info.
	Data *DestinyEntitiesInventoryDestinyInventoryComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemComponent defines model for SingleComponentResponseOfDestinyItemComponent.
type SingleComponentResponseOfDestinyItemComponent struct {
	// ItemComponent The base item component, filled with properties that are generally useful to know in any item request or that don't feel worthwhile to put in their own component.
	ItemComponent *ItemComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemInstanceComponent defines model for SingleComponentResponseOfDestinyItemInstanceComponent.
type SingleComponentResponseOfDestinyItemInstanceComponent struct {
	// ItemInstanceComponent If an item is "instanced", this will contain information about the item's instance that doesn't fit easily into other components. One might say this is the "essential" instance data for the item.
	// Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.
	// You can tell from an item's definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition's definition.inventory.isInstanceItem property.
	ItemInstanceComponent *ItemInstanceComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemObjectivesComponent defines model for SingleComponentResponseOfDestinyItemObjectivesComponent.
type SingleComponentResponseOfDestinyItemObjectivesComponent struct {
	// Data Items can have objectives and progression. When you request this block, you will obtain information about any Objectives and progression tied to this item.
	Data *DestinyEntitiesItemsDestinyItemObjectivesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemPerksComponent defines model for SingleComponentResponseOfDestinyItemPerksComponent.
type SingleComponentResponseOfDestinyItemPerksComponent struct {
	// Data Instanced items can have perks: benefits that the item bestows.
	// These are related to DestinySandboxPerkDefinition, and sometimes - but not always - have human readable info. When they do, they are the icons and text that you see in an item's tooltip.
	// Talent Grids, Sockets, and the item itself can apply Perks, which are then summarized here for your convenience.
	Data *DestinyEntitiesItemsDestinyItemPerksComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemPlugObjectivesComponent defines model for SingleComponentResponseOfDestinyItemPlugObjectivesComponent.
type SingleComponentResponseOfDestinyItemPlugObjectivesComponent struct {
	Data *DestinyComponentsItemsDestinyItemPlugObjectivesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemRenderComponent defines model for SingleComponentResponseOfDestinyItemRenderComponent.
type SingleComponentResponseOfDestinyItemRenderComponent struct {
	// Data Many items can be rendered in 3D. When you request this block, you will obtain the custom data needed to render this specific instance of the item.
	Data *DestinyEntitiesItemsDestinyItemRenderComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemReusablePlugsComponent defines model for SingleComponentResponseOfDestinyItemReusablePlugsComponent.
type SingleComponentResponseOfDestinyItemReusablePlugsComponent struct {
	Data *DestinyComponentsItemsDestinyItemReusablePlugsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemSocketsComponent defines model for SingleComponentResponseOfDestinyItemSocketsComponent.
type SingleComponentResponseOfDestinyItemSocketsComponent struct {
	// Data Instanced items can have sockets, which are slots on the item where plugs can be inserted.
	// Sockets are a bit complex: be sure to examine the documentation on the DestinyInventoryItemDefinition's "socket" block and elsewhere on these objects for more details.
	Data *DestinyEntitiesItemsDestinyItemSocketsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemStatsComponent defines model for SingleComponentResponseOfDestinyItemStatsComponent.
type SingleComponentResponseOfDestinyItemStatsComponent struct {
	// Data If you want the stats on an item's instanced data, get this component.
	// These are stats like Attack, Defense etc... and *not* historical stats.
	// Note that some stats have additional computation in-game at runtime - for instance, Magazine Size - and thus these stats might not be 100% accurate compared to what you see in-game for some stats. I know, it sucks. I hate it too.
	Data *DestinyEntitiesItemsDestinyItemStatsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyItemTalentGridComponent defines model for SingleComponentResponseOfDestinyItemTalentGridComponent.
type SingleComponentResponseOfDestinyItemTalentGridComponent struct {
	// Data Well, we're here in Destiny 2, and Talent Grids are unfortunately still around.
	// The good news is that they're pretty much only being used for certain base information on items and for Builds/Subclasses. The bad news is that they still suck. If you really want this information, grab this component.
	// An important note is that talent grids are defined as such:
	// A Grid has 1:M Nodes, which has 1:M Steps.
	// Any given node can only have a single step active at one time, which represents the actual visual contents and effects of the Node (for instance, if you see a "Super Cool Bonus" node, the actual icon and text for the node is coming from the current Step of that node).
	// Nodes can be grouped into exclusivity sets *and* as of D2, exclusivity groups (which are collections of exclusivity sets that affect each other).
	// See DestinyTalentGridDefinition for more information. Brace yourself, the water's cold out there in the deep end.
	Data *DestinyEntitiesItemsDestinyItemTalentGridComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyKiosksComponent defines model for SingleComponentResponseOfDestinyKiosksComponent.
type SingleComponentResponseOfDestinyKiosksComponent struct {
	// Data A Kiosk is a Vendor (DestinyVendorDefinition) that sells items based on whether you have already acquired that item before.
	// This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the individual character's DestinyCharacterKiosksComponent.
	// Note that, because this component returns vendorItemIndexes (that is to say, indexes into the Kiosk Vendor's itemList property), these results are necessarily content version dependent. Make sure that you have the latest version of the content manifest databases before using this data.
	Data *DestinyComponentsKiosksDestinyKiosksComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyMetricsComponent defines model for SingleComponentResponseOfDestinyMetricsComponent.
type SingleComponentResponseOfDestinyMetricsComponent struct {
	Data *DestinyComponentsMetricsDestinyMetricsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyPlatformSilverComponent defines model for SingleComponentResponseOfDestinyPlatformSilverComponent.
type SingleComponentResponseOfDestinyPlatformSilverComponent struct {
	Data *DestinyComponentsInventoryDestinyPlatformSilverComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyPlugSetsComponent defines model for SingleComponentResponseOfDestinyPlugSetsComponent.
type SingleComponentResponseOfDestinyPlugSetsComponent struct {
	// Data Sockets may refer to a "Plug Set": a set of reusable plugs that may be shared across multiple sockets (or even, in theory, multiple sockets over multiple items).
	// This is the set of those plugs that we came across in the users' inventory, along with the values for plugs in the set. Any given set in this component may be represented in Character and Profile-level, as some plugs may be Profile-level restricted, and some character-level restricted. (note that the ones that are even more specific will remain on the actual socket component itself, as they cannot be reused)
	Data *DestinyComponentsPlugSetsDestinyPlugSetsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyPresentationNodesComponent defines model for SingleComponentResponseOfDestinyPresentationNodesComponent.
type SingleComponentResponseOfDestinyPresentationNodesComponent struct {
	Data *DestinyComponentsPresentationDestinyPresentationNodesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyProfileCollectiblesComponent defines model for SingleComponentResponseOfDestinyProfileCollectiblesComponent.
type SingleComponentResponseOfDestinyProfileCollectiblesComponent struct {
	Data *DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyProfileComponent defines model for SingleComponentResponseOfDestinyProfileComponent.
type SingleComponentResponseOfDestinyProfileComponent struct {
	// Data The most essential summary information about a Profile (in Destiny 1, we called these "Accounts").
	Data *DestinyEntitiesProfilesDestinyProfileComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyProfileProgressionComponent defines model for SingleComponentResponseOfDestinyProfileProgressionComponent.
type SingleComponentResponseOfDestinyProfileProgressionComponent struct {
	// Data The set of progression-related information that applies at a Profile-wide level for your Destiny experience. This differs from the Jimi Hendrix Experience because there's less guitars on fire. Yet. #spoileralert?
	// This will include information such as Checklist info.
	Data *DestinyComponentsProfilesDestinyProfileProgressionComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyProfileRecordsComponent defines model for SingleComponentResponseOfDestinyProfileRecordsComponent.
type SingleComponentResponseOfDestinyProfileRecordsComponent struct {
	Data *DestinyComponentsRecordsDestinyProfileRecordsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyProfileTransitoryComponent defines model for SingleComponentResponseOfDestinyProfileTransitoryComponent.
type SingleComponentResponseOfDestinyProfileTransitoryComponent struct {
	// Data This is an experimental set of data that Bungie considers to be "transitory" - information that may be useful for API users, but that is coming from a non-authoritative data source about information that could potentially change at a more frequent pace than Bungie.net will receive updates about it.
	// This information is provided exclusively for convenience should any of it be useful to users: we provide no guarantees to the accuracy or timeliness of data that comes from this source. Know that this data can potentially be out-of-date or even wrong entirely if the user disconnected from the game or suddenly changed their status before we can receive refreshed data.
	Data *DestinyComponentsProfilesDestinyProfileTransitoryComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinySocialCommendationsComponent defines model for SingleComponentResponseOfDestinySocialCommendationsComponent.
type SingleComponentResponseOfDestinySocialCommendationsComponent struct {
	Data *DestinyComponentsSocialDestinySocialCommendationsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyStringVariablesComponent defines model for SingleComponentResponseOfDestinyStringVariablesComponent.
type SingleComponentResponseOfDestinyStringVariablesComponent struct {
	Data *DestinyComponentsStringVariablesDestinyStringVariablesComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// SingleComponentResponseOfDestinyVendorReceiptsComponent defines model for SingleComponentResponseOfDestinyVendorReceiptsComponent.
type SingleComponentResponseOfDestinyVendorReceiptsComponent struct {
	// Data For now, this isn't used for much: it's a record of the recent refundable purchases that the user has made. In the future, it could be used for providing refunds/buyback via the API. Wouldn't that be fun?
	Data *DestinyEntitiesProfilesDestinyVendorReceiptsComponent `json:"data,omitempty"`

	// Disabled If true, this component is disabled.
	Disabled *bool  `json:"disabled"`
	Privacy  *int32 `json:"privacy,omitempty"`
}

// TrendingTrendingEntry The list entry view for trending items. Returns just enough to show the item on the trending page.
type TrendingTrendingEntry struct {
	// CreationDate If the entry has a date at which it was created, this is that date.
	CreationDate *time.Time `json:"creationDate"`

	// DisplayName The localized "display name/article title/'primary localized identifier'" of the entity.
	DisplayName *string    `json:"displayName,omitempty"`
	EndDate     *time.Time `json:"endDate"`

	// EntityType An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.
	EntityType *int32 `json:"entityType,omitempty"`

	// FeatureImage If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time.
	FeatureImage *string `json:"featureImage,omitempty"`

	// Identifier We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.
	Identifier *string `json:"identifier,omitempty"`
	Image      *string `json:"image,omitempty"`
	IsFeatured *bool   `json:"isFeatured,omitempty"`

	// Items If the item is of entityType TrendingEntryType.Container, it may have items - also Trending Entries - contained within it. This is the ordered list of those to display under the Container's header.
	Items *[]TrendingTrendingEntry `json:"items,omitempty"`
	Link  *string                  `json:"link,omitempty"`

	// Mp4Video If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
	Mp4Video  *string    `json:"mp4Video,omitempty"`
	StartDate *time.Time `json:"startDate"`

	// Tagline If the entity has a localized tagline/subtitle/motto/whatever, that is found here.
	Tagline *string `json:"tagline,omitempty"`

	// WebmVideo If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
	WebmVideo *string `json:"webmVideo,omitempty"`

	// Weight The weighted score of this trending item.
	Weight *float64 `json:"weight,omitempty"`
}

// UserGeneralUser defines model for User.GeneralUser.
type UserGeneralUser struct {
	About                             *string                `json:"about,omitempty"`
	BlizzardDisplayName               *string                `json:"blizzardDisplayName,omitempty"`
	CachedBungieGlobalDisplayName     *string                `json:"cachedBungieGlobalDisplayName,omitempty"`
	CachedBungieGlobalDisplayNameCode *int16                 `json:"cachedBungieGlobalDisplayNameCode"`
	Context                           *UserUserToUserContext `json:"context,omitempty"`
	DisplayName                       *string                `json:"displayName,omitempty"`
	EgsDisplayName                    *string                `json:"egsDisplayName,omitempty"`
	FbDisplayName                     *string                `json:"fbDisplayName,omitempty"`
	FirstAccess                       *time.Time             `json:"firstAccess"`
	IsDeleted                         *bool                  `json:"isDeleted,omitempty"`
	LastBanReportId                   *int64                 `json:"lastBanReportId"`
	LastUpdate                        *time.Time             `json:"lastUpdate"`
	LegacyPortalUID                   *int64                 `json:"legacyPortalUID"`
	Locale                            *string                `json:"locale,omitempty"`
	LocaleInheritDefault              *bool                  `json:"localeInheritDefault,omitempty"`
	MembershipId                      *string                `json:"membershipId,omitempty"`
	NormalizedName                    *string                `json:"normalizedName,omitempty"`
	ProfileBanExpire                  *time.Time             `json:"profileBanExpire"`
	ProfilePicture                    *int32                 `json:"profilePicture,omitempty"`
	ProfilePicturePath                *string                `json:"profilePicturePath,omitempty"`
	ProfilePictureWidePath            *string                `json:"profilePictureWidePath,omitempty"`
	ProfileTheme                      *int32                 `json:"profileTheme,omitempty"`
	ProfileThemeName                  *string                `json:"profileThemeName,omitempty"`
	PsnDisplayName                    *string                `json:"psnDisplayName,omitempty"`
	ShowActivity                      *bool                  `json:"showActivity"`
	ShowGroupMessaging                *bool                  `json:"showGroupMessaging,omitempty"`
	StadiaDisplayName                 *string                `json:"stadiaDisplayName,omitempty"`
	StatusDate                        *time.Time             `json:"statusDate,omitempty"`
	StatusText                        *string                `json:"statusText,omitempty"`
	SteamDisplayName                  *string                `json:"steamDisplayName,omitempty"`
	SuccessMessageFlags               *string                `json:"successMessageFlags,omitempty"`
	TwitchDisplayName                 *string                `json:"twitchDisplayName,omitempty"`
	UniqueName                        *string                `json:"uniqueName,omitempty"`
	UserTitle                         *int32                 `json:"userTitle,omitempty"`
	UserTitleDisplay                  *string                `json:"userTitleDisplay,omitempty"`
	XboxDisplayName                   *string                `json:"xboxDisplayName,omitempty"`
}

// UserUserInfoCard This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
type UserUserInfoCard struct {
	// ApplicableMembershipTypes The list of Membership Types indicating the platforms on which this Membership can be used.
	//  Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
	ApplicableMembershipTypes *[]int32 `json:"applicableMembershipTypes,omitempty"`

	// BungieGlobalDisplayName The bungie global display name, if set.
	BungieGlobalDisplayName *string `json:"bungieGlobalDisplayName,omitempty"`

	// BungieGlobalDisplayNameCode The bungie global display name code, if set.
	BungieGlobalDisplayNameCode *int16 `json:"bungieGlobalDisplayNameCode"`

	// CrossSaveOverride If there is a cross save override in effect, this value will tell you the type that is overridding this one.
	CrossSaveOverride *int32 `json:"crossSaveOverride,omitempty"`

	// DisplayName Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
	DisplayName *string `json:"displayName,omitempty"`

	// IconPath URL the Icon if available.
	IconPath *string `json:"iconPath,omitempty"`

	// IsPublic If True, this is a public user membership.
	IsPublic *bool `json:"isPublic,omitempty"`

	// MembershipId Membership ID as they user is known in the Accounts service
	MembershipId *string `json:"membershipId,omitempty"`

	// MembershipType Type of the membership. Not necessarily the native type.
	MembershipType *int32 `json:"membershipType,omitempty"`

	// SupplementalDisplayName A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
	SupplementalDisplayName *string `json:"supplementalDisplayName,omitempty"`
}

// MembershipData defines model for User.UserMembershipData.
type MembershipData struct {
	BungieNetUser *UserGeneralUser `json:"bungieNetUser,omitempty"`

	// DestinyMemberships this allows you to see destiny memberships that are visible and linked to this account (regardless of whether or not they have characters on the world server)
	DestinyMemberships *[]GroupsV2GroupUserInfoCard `json:"destinyMemberships,omitempty"`

	// PrimaryMembershipId If this property is populated, it will have the membership ID of the account considered to be "primary" in this user's cross save relationship.
	//  If null, this user has no cross save relationship, nor primary account.
	PrimaryMembershipId *string `json:"primaryMembershipId"`
}

// UserSearchPrefixRequest defines model for User.UserSearchPrefixRequest.
type UserSearchPrefixRequest struct {
	DisplayNamePrefix *string `json:"displayNamePrefix,omitempty"`
}

// SearchResponse defines model for User.UserSearchResponse.
type SearchResponse struct {
	HasMore       *bool               `json:"hasMore,omitempty"`
	Page          *int32              `json:"page,omitempty"`
	SearchResults *[]UserSearchDetail `json:"searchResults,omitempty"`
}

// UserSearchDetail defines model for User.UserSearchResponseDetail.
type UserSearchDetail struct {
	BungieGlobalDisplayName     *string             `json:"bungieGlobalDisplayName,omitempty"`
	BungieGlobalDisplayNameCode *int16              `json:"bungieGlobalDisplayNameCode"`
	BungieNetMembershipId       *string             `json:"bungieNetMembershipId"`
	DestinyMemberships          *[]UserUserInfoCard `json:"destinyMemberships,omitempty"`
}

// UserUserToUserContext defines model for User.UserToUserContext.
type UserUserToUserContext struct {
	GlobalIgnoreEndDate *time.Time             `json:"globalIgnoreEndDate"`
	IgnoreStatus        *IgnoresIgnoreResponse `json:"ignoreStatus,omitempty"`
	IsFollowing         *bool                  `json:"isFollowing,omitempty"`
}

// DestinyActivityHistoryResults defines model for Destiny.HistoricalStats.DestinyActivityHistoryResults.
type DestinyActivityHistoryResults struct {
	DetailedErrorTrace *string                                              `json:"DetailedErrorTrace,omitempty"`
	ErrorCode          *int32                                               `json:"ErrorCode,omitempty"`
	ErrorStatus        *string                                              `json:"ErrorStatus,omitempty"`
	Message            *string                                              `json:"Message,omitempty"`
	MessageData        *map[string]string                                   `json:"MessageData,omitempty"`
	Response           *DestinyHistoricalStatsDestinyActivityHistoryResults `json:"Response,omitempty"`
	ThrottleSeconds    *int32                                               `json:"ThrottleSeconds,omitempty"`
}

// DestinyHistoricalStatsDestinyPostGameCarnageReportData defines model for Destiny.HistoricalStats.DestinyPostGameCarnageReportData.
type DestinyHistoricalStatsDestinyPostGameCarnageReportData struct {
	DetailedErrorTrace        *string                    `json:"DetailedErrorTrace,omitempty"`
	ErrorCode                 *int32                     `json:"ErrorCode,omitempty"`
	ErrorStatus               *string                    `json:"ErrorStatus,omitempty"`
	Message                   *string                    `json:"Message,omitempty"`
	MessageData               *map[string]string         `json:"MessageData,omitempty"`
	PostGameCarnageReportData *PostGameCarnageReportData `json:"Response,omitempty"`
	ThrottleSeconds           *int32                     `json:"ThrottleSeconds,omitempty"`
}

// DestinyItemResponse defines model for Destiny.Responses.DestinyItemResponse.
type DestinyItemResponse struct {
	DetailedErrorTrace *string            `json:"DetailedErrorTrace,omitempty"`
	ErrorCode          *int32             `json:"ErrorCode,omitempty"`
	ErrorStatus        *string            `json:"ErrorStatus,omitempty"`
	Message            *string            `json:"Message,omitempty"`
	MessageData        *map[string]string `json:"MessageData,omitempty"`

	// DestinyItem The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	DestinyItem     *DestinyItem `json:"Response,omitempty"`
	ThrottleSeconds *int32       `json:"ThrottleSeconds,omitempty"`
}

// DestinyProfileResponse defines model for Destiny.Responses.DestinyProfileResponse.
type DestinyProfileResponse struct {
	DetailedErrorTrace *string            `json:"DetailedErrorTrace,omitempty"`
	ErrorCode          *int32             `json:"ErrorCode,omitempty"`
	ErrorStatus        *string            `json:"ErrorStatus,omitempty"`
	Message            *string            `json:"Message,omitempty"`
	MessageData        *map[string]string `json:"MessageData,omitempty"`

	// Response The response for GetDestinyProfile, with components for character and item-level data.
	Response        *DestinyResponsesDestinyProfileResponse `json:"Response,omitempty"`
	ThrottleSeconds *int32                                  `json:"ThrottleSeconds,omitempty"`
}

// UserUserMembershipData defines model for User.UserMembershipData.
type UserUserMembershipData struct {
	DetailedErrorTrace *string            `json:"DetailedErrorTrace,omitempty"`
	ErrorCode          *int32             `json:"ErrorCode,omitempty"`
	ErrorStatus        *string            `json:"ErrorStatus,omitempty"`
	Message            *string            `json:"Message,omitempty"`
	MessageData        *map[string]string `json:"MessageData,omitempty"`
	MembershipData     *MembershipData    `json:"Response,omitempty"`
	ThrottleSeconds    *int32             `json:"ThrottleSeconds,omitempty"`
}

// UserSearchResponse defines model for User.UserSearchResponse.
type UserSearchResponse struct {
	DetailedErrorTrace *string            `json:"DetailedErrorTrace,omitempty"`
	ErrorCode          *int32             `json:"ErrorCode,omitempty"`
	ErrorStatus        *string            `json:"ErrorStatus,omitempty"`
	Message            *string            `json:"Message,omitempty"`
	MessageData        *map[string]string `json:"MessageData,omitempty"`
	SearchResponse     *SearchResponse    `json:"Response,omitempty"`
	ThrottleSeconds    *int32             `json:"ThrottleSeconds,omitempty"`
}

// Destiny2GetActivityHistoryParams defines parameters for Destiny2GetActivityHistory.
type Destiny2GetActivityHistoryParams struct {
	// Count Number of rows to return
	Count *int32 `form:"count,omitempty" json:"count,omitempty"`

	// Mode A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.
	Mode *int32 `form:"mode,omitempty" json:"mode,omitempty"`

	// Page Page number to return, starting with 0.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
}

// Destiny2GetProfileParams defines parameters for Destiny2GetProfile.
type Destiny2GetProfileParams struct {
	// Components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
	Components *[]int32 `form:"components,omitempty" json:"components,omitempty"`
}

// Destiny2GetItemParams defines parameters for Destiny2GetItem.
type Destiny2GetItemParams struct {
	// Components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
	Components *[]int32 `form:"components,omitempty" json:"components,omitempty"`
}

// UserSearchByGlobalNamePostJSONRequestBody defines body for UserSearchByGlobalNamePost for application/json ContentType.
type UserSearchByGlobalNamePostJSONRequestBody = UserSearchPrefixRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Destiny2GetPostGameCarnageReport request
	Destiny2GetPostGameCarnageReport(ctx context.Context, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Destiny2GetActivityHistory request
	Destiny2GetActivityHistory(ctx context.Context, membershipType int32, destinyMembershipId int64, characterId int64, params *Destiny2GetActivityHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Destiny2GetProfile request
	Destiny2GetProfile(ctx context.Context, membershipType int32, destinyMembershipId int64, params *Destiny2GetProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Destiny2GetItem request
	Destiny2GetItem(ctx context.Context, membershipType int32, destinyMembershipId int64, itemInstanceId int64, params *Destiny2GetItemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGetMembershipDataForCurrentUser request
	UserGetMembershipDataForCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserSearchByGlobalNamePostWithBody request with any body
	UserSearchByGlobalNamePostWithBody(ctx context.Context, page int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserSearchByGlobalNamePost(ctx context.Context, page int32, body UserSearchByGlobalNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Destiny2GetPostGameCarnageReport(ctx context.Context, activityId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestiny2GetPostGameCarnageReportRequest(c.Server, activityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Destiny2GetActivityHistory(ctx context.Context, membershipType int32, destinyMembershipId int64, characterId int64, params *Destiny2GetActivityHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestiny2GetActivityHistoryRequest(c.Server, membershipType, destinyMembershipId, characterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Destiny2GetProfile(ctx context.Context, membershipType int32, destinyMembershipId int64, params *Destiny2GetProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestiny2GetProfileRequest(c.Server, membershipType, destinyMembershipId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Destiny2GetItem(ctx context.Context, membershipType int32, destinyMembershipId int64, itemInstanceId int64, params *Destiny2GetItemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestiny2GetItemRequest(c.Server, membershipType, destinyMembershipId, itemInstanceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGetMembershipDataForCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetMembershipDataForCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserSearchByGlobalNamePostWithBody(ctx context.Context, page int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserSearchByGlobalNamePostRequestWithBody(c.Server, page, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserSearchByGlobalNamePost(ctx context.Context, page int32, body UserSearchByGlobalNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserSearchByGlobalNamePostRequest(c.Server, page, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDestiny2GetPostGameCarnageReportRequest generates requests for Destiny2GetPostGameCarnageReport
func NewDestiny2GetPostGameCarnageReportRequest(server string, activityId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "activityId", runtime.ParamLocationPath, activityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Destiny2/Stats/PostGameCarnageReport/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDestiny2GetActivityHistoryRequest generates requests for Destiny2GetActivityHistory
func NewDestiny2GetActivityHistoryRequest(server string, membershipType int32, destinyMembershipId int64, characterId int64, params *Destiny2GetActivityHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "membershipType", runtime.ParamLocationPath, membershipType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "destinyMembershipId", runtime.ParamLocationPath, destinyMembershipId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "characterId", runtime.ParamLocationPath, characterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Destiny2/%s/Account/%s/Character/%s/Stats/Activities/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDestiny2GetProfileRequest generates requests for Destiny2GetProfile
func NewDestiny2GetProfileRequest(server string, membershipType int32, destinyMembershipId int64, params *Destiny2GetProfileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "membershipType", runtime.ParamLocationPath, membershipType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "destinyMembershipId", runtime.ParamLocationPath, destinyMembershipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Destiny2/%s/Profile/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Components != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "components", runtime.ParamLocationQuery, *params.Components); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDestiny2GetItemRequest generates requests for Destiny2GetItem
func NewDestiny2GetItemRequest(server string, membershipType int32, destinyMembershipId int64, itemInstanceId int64, params *Destiny2GetItemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "membershipType", runtime.ParamLocationPath, membershipType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "destinyMembershipId", runtime.ParamLocationPath, destinyMembershipId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "itemInstanceId", runtime.ParamLocationPath, itemInstanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Destiny2/%s/Profile/%s/Item/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Components != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "components", runtime.ParamLocationQuery, *params.Components); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserGetMembershipDataForCurrentUserRequest generates requests for UserGetMembershipDataForCurrentUser
func NewUserGetMembershipDataForCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/GetMembershipsForCurrentUser/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserSearchByGlobalNamePostRequest calls the generic UserSearchByGlobalNamePost builder with application/json body
func NewUserSearchByGlobalNamePostRequest(server string, page int32, body UserSearchByGlobalNamePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserSearchByGlobalNamePostRequestWithBody(server, page, "application/json", bodyReader)
}

// NewUserSearchByGlobalNamePostRequestWithBody generates requests for UserSearchByGlobalNamePost with any type of body
func NewUserSearchByGlobalNamePostRequestWithBody(server string, page int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "page", runtime.ParamLocationPath, page)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/Search/GlobalName/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Destiny2GetPostGameCarnageReportWithResponse request
	Destiny2GetPostGameCarnageReportWithResponse(ctx context.Context, activityId int64, reqEditors ...RequestEditorFn) (*Destiny2GetPostGameCarnageReportResponse, error)

	// Destiny2GetActivityHistoryWithResponse request
	Destiny2GetActivityHistoryWithResponse(ctx context.Context, membershipType int32, destinyMembershipId int64, characterId int64, params *Destiny2GetActivityHistoryParams, reqEditors ...RequestEditorFn) (*Destiny2GetActivityHistoryResponse, error)

	// Destiny2GetProfileWithResponse request
	Destiny2GetProfileWithResponse(ctx context.Context, membershipType int32, destinyMembershipId int64, params *Destiny2GetProfileParams, reqEditors ...RequestEditorFn) (*Destiny2GetProfileResponse, error)

	// Destiny2GetItemWithResponse request
	Destiny2GetItemWithResponse(ctx context.Context, membershipType int32, destinyMembershipId int64, itemInstanceId int64, params *Destiny2GetItemParams, reqEditors ...RequestEditorFn) (*Destiny2GetItemResponse, error)

	// UserGetMembershipDataForCurrentUserWithResponse request
	UserGetMembershipDataForCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserGetMembershipDataForCurrentUserResponse, error)

	// UserSearchByGlobalNamePostWithBodyWithResponse request with any body
	UserSearchByGlobalNamePostWithBodyWithResponse(ctx context.Context, page int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserSearchByGlobalNamePostResponse, error)

	UserSearchByGlobalNamePostWithResponse(ctx context.Context, page int32, body UserSearchByGlobalNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*UserSearchByGlobalNamePostResponse, error)
}

type Destiny2GetPostGameCarnageReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinyHistoricalStatsDestinyPostGameCarnageReportData
}

// Status returns HTTPResponse.Status
func (r Destiny2GetPostGameCarnageReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Destiny2GetPostGameCarnageReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Destiny2GetActivityHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinyActivityHistoryResults
}

// Status returns HTTPResponse.Status
func (r Destiny2GetActivityHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Destiny2GetActivityHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Destiny2GetProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinyProfileResponse
}

// Status returns HTTPResponse.Status
func (r Destiny2GetProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Destiny2GetProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Destiny2GetItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinyItemResponse
}

// Status returns HTTPResponse.Status
func (r Destiny2GetItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Destiny2GetItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetMembershipDataForCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserUserMembershipData
}

// Status returns HTTPResponse.Status
func (r UserGetMembershipDataForCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetMembershipDataForCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserSearchByGlobalNamePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSearchResponse
}

// Status returns HTTPResponse.Status
func (r UserSearchByGlobalNamePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserSearchByGlobalNamePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Destiny2GetPostGameCarnageReportWithResponse request returning *Destiny2GetPostGameCarnageReportResponse
func (c *ClientWithResponses) Destiny2GetPostGameCarnageReportWithResponse(ctx context.Context, activityId int64, reqEditors ...RequestEditorFn) (*Destiny2GetPostGameCarnageReportResponse, error) {
	rsp, err := c.Destiny2GetPostGameCarnageReport(ctx, activityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestiny2GetPostGameCarnageReportResponse(rsp)
}

// Destiny2GetActivityHistoryWithResponse request returning *Destiny2GetActivityHistoryResponse
func (c *ClientWithResponses) Destiny2GetActivityHistoryWithResponse(ctx context.Context, membershipType int32, destinyMembershipId int64, characterId int64, params *Destiny2GetActivityHistoryParams, reqEditors ...RequestEditorFn) (*Destiny2GetActivityHistoryResponse, error) {
	rsp, err := c.Destiny2GetActivityHistory(ctx, membershipType, destinyMembershipId, characterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestiny2GetActivityHistoryResponse(rsp)
}

// Destiny2GetProfileWithResponse request returning *Destiny2GetProfileResponse
func (c *ClientWithResponses) Destiny2GetProfileWithResponse(ctx context.Context, membershipType int32, destinyMembershipId int64, params *Destiny2GetProfileParams, reqEditors ...RequestEditorFn) (*Destiny2GetProfileResponse, error) {
	rsp, err := c.Destiny2GetProfile(ctx, membershipType, destinyMembershipId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestiny2GetProfileResponse(rsp)
}

// Destiny2GetItemWithResponse request returning *Destiny2GetItemResponse
func (c *ClientWithResponses) Destiny2GetItemWithResponse(ctx context.Context, membershipType int32, destinyMembershipId int64, itemInstanceId int64, params *Destiny2GetItemParams, reqEditors ...RequestEditorFn) (*Destiny2GetItemResponse, error) {
	rsp, err := c.Destiny2GetItem(ctx, membershipType, destinyMembershipId, itemInstanceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestiny2GetItemResponse(rsp)
}

// UserGetMembershipDataForCurrentUserWithResponse request returning *UserGetMembershipDataForCurrentUserResponse
func (c *ClientWithResponses) UserGetMembershipDataForCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserGetMembershipDataForCurrentUserResponse, error) {
	rsp, err := c.UserGetMembershipDataForCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetMembershipDataForCurrentUserResponse(rsp)
}

// UserSearchByGlobalNamePostWithBodyWithResponse request with arbitrary body returning *UserSearchByGlobalNamePostResponse
func (c *ClientWithResponses) UserSearchByGlobalNamePostWithBodyWithResponse(ctx context.Context, page int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserSearchByGlobalNamePostResponse, error) {
	rsp, err := c.UserSearchByGlobalNamePostWithBody(ctx, page, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserSearchByGlobalNamePostResponse(rsp)
}

func (c *ClientWithResponses) UserSearchByGlobalNamePostWithResponse(ctx context.Context, page int32, body UserSearchByGlobalNamePostJSONRequestBody, reqEditors ...RequestEditorFn) (*UserSearchByGlobalNamePostResponse, error) {
	rsp, err := c.UserSearchByGlobalNamePost(ctx, page, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserSearchByGlobalNamePostResponse(rsp)
}

// ParseDestiny2GetPostGameCarnageReportResponse parses an HTTP response from a Destiny2GetPostGameCarnageReportWithResponse call
func ParseDestiny2GetPostGameCarnageReportResponse(rsp *http.Response) (*Destiny2GetPostGameCarnageReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Destiny2GetPostGameCarnageReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinyHistoricalStatsDestinyPostGameCarnageReportData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestiny2GetActivityHistoryResponse parses an HTTP response from a Destiny2GetActivityHistoryWithResponse call
func ParseDestiny2GetActivityHistoryResponse(rsp *http.Response) (*Destiny2GetActivityHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Destiny2GetActivityHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinyActivityHistoryResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestiny2GetProfileResponse parses an HTTP response from a Destiny2GetProfileWithResponse call
func ParseDestiny2GetProfileResponse(rsp *http.Response) (*Destiny2GetProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Destiny2GetProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinyProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestiny2GetItemResponse parses an HTTP response from a Destiny2GetItemWithResponse call
func ParseDestiny2GetItemResponse(rsp *http.Response) (*Destiny2GetItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Destiny2GetItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinyItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserGetMembershipDataForCurrentUserResponse parses an HTTP response from a UserGetMembershipDataForCurrentUserWithResponse call
func ParseUserGetMembershipDataForCurrentUserResponse(rsp *http.Response) (*UserGetMembershipDataForCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetMembershipDataForCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserUserMembershipData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserSearchByGlobalNamePostResponse parses an HTTP response from a UserSearchByGlobalNamePostWithResponse call
func ParseUserSearchByGlobalNamePostResponse(rsp *http.Response) (*UserSearchByGlobalNamePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserSearchByGlobalNamePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
